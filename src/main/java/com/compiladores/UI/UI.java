
package com.compiladores.UI;

import com.compiladores.Abstracto.Instruccion;
import com.compiladores.AnalizadorLexico.Lexico;
import com.compiladores.AnalizadorSintactico.parser;
import com.compiladores.Excepciones.Errores;
import com.compiladores.Instrucciones.Declaracion;
import com.compiladores.Instrucciones.Procedure;
import com.compiladores.Simbolo.Arbol;
import com.compiladores.Simbolo.TablaSimbolos;

import javax.swing.*;
import javax.swing.filechooser.FileNameExtensionFilter;
import javax.swing.text.StyledDocument;
import java.awt.*;
import java.io.*;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.Map;


/**
 *
 * @author carlosl
 */
public class UI extends javax.swing.JFrame {

    /**
     * Creates new form UI
     */
    
    private File currentFile;
    private Map<Component, File> fileMap;
    private Reportes panelReportes;
    private ReporteSimbolos panelReportesSim;
    private NumeroLinea numeroLinea;
    
    public UI() {
        initComponents();
        numeroLinea = new NumeroLinea(jTextPane1);
        jScrollPane1.setRowHeaderView(numeroLinea);
        panelReportes = new Reportes();
        panelReportesSim = new ReporteSimbolos();
        fileMap = new HashMap<>();
        jTextPane2.setBackground(Color.BLACK);  // Fondo negro para simular una terminal
        jTextPane2.setForeground(Color.WHITE);
        jTextPane2.setEditable(false);
        jMenu2.setVisible(false);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new JLabel();
        jTabbedPane1 = new javax.swing.JTabbedPane();
        jScrollPane1 = new JScrollPane();
        jTextPane1 = new JTextPane();
        jButton1 = new JButton();
        jLabel2 = new JLabel();
        jScrollPane2 = new JScrollPane();
        jTextPane2 = new JTextPane();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        jMenuItem1 = new javax.swing.JMenuItem();
        jMenuItem2 = new javax.swing.JMenuItem();
        jMenuItem3 = new javax.swing.JMenuItem();
        jMenuItem4 = new javax.swing.JMenuItem();
        jMenuItem5 = new javax.swing.JMenuItem();
        jMenu2 = new javax.swing.JMenu();
        jMenu4 = new javax.swing.JMenu();
        jMenuItem6 = new javax.swing.JMenuItem();
        jMenuItem7 = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        getContentPane().setLayout(new javax.swing.OverlayLayout(getContentPane()));

        jLabel1.setFont(new java.awt.Font("Liberation Sans", 0, 24)); // NOI18N
        jLabel1.setText("Entrada");

        jScrollPane1.setViewportView(jTextPane1);

        jTabbedPane1.addTab("tab1", jScrollPane1);

        jButton1.setText("Ejecutar");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jLabel2.setFont(new java.awt.Font("Liberation Sans", 0, 24)); // NOI18N
        jLabel2.setText("Consola");

        jTextPane2.setFont(new java.awt.Font("Monospaced", 0, 15)); // NOI18N
        jScrollPane2.setViewportView(jTextPane2);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(24, 24, 24)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addComponent(jButton1)
                        .addGap(22, 22, 22))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 91, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel1))
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jPanel1Layout.createSequentialGroup()
                    .addGap(24, 24, 24)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                            .addComponent(jTabbedPane1)
                            .addGap(22, 22, 22))
                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 644, Short.MAX_VALUE)
                            .addGap(25, 25, 25)))))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(18, 18, 18)
                .addComponent(jLabel1)
                .addGap(239, 239, 239)
                .addComponent(jButton1)
                .addGap(31, 31, 31)
                .addComponent(jLabel2)
                .addGap(215, 215, 215))
            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jPanel1Layout.createSequentialGroup()
                    .addGap(46, 46, 46)
                    .addComponent(jTabbedPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 225, Short.MAX_VALUE)
                    .addGap(110, 110, 110)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 175, Short.MAX_VALUE)
                    .addGap(27, 27, 27)))
        );

        getContentPane().add(jPanel1);

        jMenu1.setText("Archivo");

        jMenuItem1.setText("Nuevo Archivo");
        jMenuItem1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem1ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem1);

        jMenuItem2.setText("Abrir Archivo");
        jMenuItem2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem2ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem2);

        jMenuItem3.setText("Guardar ");
        jMenuItem3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem3ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem3);

        jMenuItem4.setText("Guardar como");
        jMenuItem4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem4ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem4);

        jMenuItem5.setText("Cerrar Archivo");
        jMenuItem5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem5ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem5);

        jMenuBar1.add(jMenu1);

        jMenu2.setText("Inicio");
        jMenu2.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jMenu2MouseClicked(evt);
            }
        });
        jMenu2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenu2ActionPerformed(evt);
            }
        });
        jMenuBar1.add(jMenu2);

        jMenu4.setText("Reportes");
        jMenu4.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jMenu4MouseClicked(evt);
            }
        });
        jMenu4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenu4ActionPerformed(evt);
            }
        });

        jMenuItem6.setText("Errores");
        jMenuItem6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem6ActionPerformed(evt);
            }
        });
        jMenu4.add(jMenuItem6);

        jMenuItem7.setText("Simbolos");
        jMenuItem7.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem7ActionPerformed(evt);
            }
        });
        jMenu4.add(jMenuItem7);

        jMenuBar1.add(jMenu4);

        setJMenuBar(jMenuBar1);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jMenuItem1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem1ActionPerformed
        crearNuevoArchivo();
    }//GEN-LAST:event_jMenuItem1ActionPerformed

    private void crearNuevoArchivo() {
        JTextPane textPane = new JTextPane();
        JScrollPane scrollPane = new JScrollPane(textPane);
        jTabbedPane1.addTab("Nuevo archivo", scrollPane);
        jTabbedPane1.setSelectedComponent(scrollPane);
        numeroLinea = new NumeroLinea(textPane);
        scrollPane.setRowHeaderView(numeroLinea);
        fileMap.put(scrollPane, null); // Asociar null porque es un nuevo archivo sin guardar
    }
    
    private void jMenuItem2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem2ActionPerformed
        JFileChooser fileChooser = new JFileChooser();
        FileNameExtensionFilter filter = new FileNameExtensionFilter("Archivos Pascal (*.pas)", "pas");
        fileChooser.setFileFilter(filter);

        int retornarValor = fileChooser.showOpenDialog(null);
        if (retornarValor == JFileChooser.APPROVE_OPTION) {
            File achivoseleccionado = fileChooser.getSelectedFile();
            abrirArchivo(achivoseleccionado);
        }
    }//GEN-LAST:event_jMenuItem2ActionPerformed

    private void abrirArchivo(File archivo) {
        try (BufferedReader reader = new BufferedReader(new FileReader(archivo))) {
            JTextPane textPane = new JTextPane();
            JScrollPane scrollPane = new JScrollPane(textPane);
            jTabbedPane1.addTab(archivo.getName(), scrollPane);
            jTabbedPane1.setSelectedComponent(scrollPane);
            numeroLinea = new NumeroLinea(textPane);
            scrollPane.setRowHeaderView(numeroLinea);

            textPane.setText("");
            String line;
            while ((line = reader.readLine()) != null) {
                textPane.setText(textPane.getText() + line + "\n");
            }

            fileMap.put(scrollPane, archivo); 
        } catch (IOException e) {
            JOptionPane.showMessageDialog(this, "Error al leer el archivo: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        }
    }
    
    
    private void jMenuItem3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem3ActionPerformed
        guardarArchivoActual();
    }//GEN-LAST:event_jMenuItem3ActionPerformed

    private void jMenuItem4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem4ActionPerformed
        guardarArchivoComo();
    }//GEN-LAST:event_jMenuItem4ActionPerformed

    private void jMenuItem5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem5ActionPerformed
         cerrarTablaActual();
    }//GEN-LAST:event_jMenuItem5ActionPerformed

    private void jMenu4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenu4ActionPerformed
        
    }//GEN-LAST:event_jMenu4ActionPerformed

    private void jMenu4MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jMenu4MouseClicked
        
    }//GEN-LAST:event_jMenu4MouseClicked

    private void jMenu2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenu2ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jMenu2ActionPerformed

    private void jMenu2MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jMenu2MouseClicked
        jMenu1.setVisible(true);
        jMenu2.setVisible(false);
        jPanel1.setVisible(true);

        SwingUtilities.invokeLater(new Runnable() {
            @Override
            public void run() {
                getContentPane().removeAll();
                getContentPane().add(jPanel1, BorderLayout.CENTER);
                revalidate();
                repaint();
            }
        });
    }//GEN-LAST:event_jMenu2MouseClicked

    private void jMenuItem6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem6ActionPerformed
        jMenu1.setVisible(false);
        jMenu2.setVisible(true);
        // Muestra el panel de reportes
        panelReportes.setVisible(true);

        // Ejecutar en el Event Dispatch Thread
        SwingUtilities.invokeLater(() -> {
            // Elimina todos los componentes del contenido del JFrame
            getContentPane().removeAll();
            // Agrega el panel de reportes al contenido del JFrame
            getContentPane().add(panelReportes, BorderLayout.CENTER); // Ajusta el BorderLayout según tus necesidades
            
            // Vuelve a validar y repintar el JFrame
            revalidate();
            repaint();
        });
    }//GEN-LAST:event_jMenuItem6ActionPerformed

    private void jMenuItem7ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem7ActionPerformed
        jMenu1.setVisible(false);
        jMenu2.setVisible(true);
        // Muestra el panel de reportes
        panelReportesSim.setVisible(true);

        // Ejecutar en el Event Dispatch Thread
        SwingUtilities.invokeLater(() -> {
            // Elimina todos los componentes del contenido del JFrame
            getContentPane().removeAll();
            // Agrega el panel de reportes al contenido del JFrame
            getContentPane().add(panelReportesSim, BorderLayout.CENTER); // Ajusta el BorderLayout según tus necesidades
            
            // Vuelve a validar y repintar el JFrame
            revalidate();
            repaint();
        });
    }//GEN-LAST:event_jMenuItem7ActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed

        Component selectedComponent = jTabbedPane1.getSelectedComponent();
        if (selectedComponent != null) {
            JTextPane textPane = (JTextPane) ((JScrollPane) selectedComponent).getViewport().getView();
            String texto = textPane.getText();

            if (texto.isEmpty()) {
                return;
            }
            try {
                Lexico s = new Lexico(new BufferedReader(new StringReader(texto)));
                parser p = new parser(s);

                var resultado = p.parse();
                var ast = new Arbol((LinkedList<Instruccion>) resultado.value);
                var tabla = new TablaSimbolos();

                tabla.setNombre("GLOBAL");
                ast.setConsola("");
                ast.setTablaGlobal(tabla);

                LinkedList<Errores> lista = new LinkedList<>();
                lista.addAll(s.listaErrores);
                lista.addAll(p.listaErrores);

                for (var a : ast.getInstrucciones()) {

                    if (a == null) {
                        continue;
                    }

                   /* if (a instanceof Declaracion) {

                            var res = a.interpretar(ast, tabla);
                            if (res instanceof Errores errores) {
                                lista.add(errores);
                            }


                    }*/

                    if (a instanceof Procedure ) {
                        ast.addFunciones(a);
                    }

                    /*var res = a.interpretar(ast, tabla);
                    if (res instanceof Errores errores) {
                        lista.add(errores);
                    }*/
                }
                System.out.println(ast.getInstrucciones());
                for (var a : ast.getInstrucciones()) {



                    if (a == null) {
                        continue;
                    }

                    if (!(a instanceof Procedure)) {
                        /*if (a instanceof Declaracion) {
                            if (!((Declaracion) a).entorno.equals("Procedure")) {
                                var res = a.interpretar(ast, tabla);
                                if (res instanceof Errores errores) {
                                    lista.add(errores);
                                }
                            }else{
                                var res = a.interpretar(ast, tabla);
                                if (res instanceof Errores errores) {
                                    lista.add(errores);
                                }
                            }

                        }
                        else {*/
                            var res = a.interpretar(ast, tabla);
                            if (res instanceof Errores errores) {
                                lista.add(errores);
                            }
                       // }
                    }
                }
                if (lista.isEmpty()) {
                    System.out.println("Lista erores vacia");
                    ast.Print("Ejecucion finalizada Archivo Validado Correctamente");
                } else {
                    System.out.println("Lista errores no vacia");
                    ast.Print("Ejecucion finalizada Archivo con errores");
                }

                StyledDocument doc = jTextPane2.getStyledDocument();
                String acumulado = "";
                jTextPane2.setText("");
                acumulado += ast.getConsola();

                for (var i : lista) {
                    acumulado += i;
                }

                doc.insertString(doc.getLength(), acumulado, null);
                panelReportes.panelReporte(lista);
                panelReportesSim.panelReporte(tabla);

                System.out.println(ast.getConsola());

                System.out.println("Errores");
                for (var i : lista) {
                    System.out.println(i);
                }
            } catch (Exception ex) {
                System.out.println("Algo salio mal");
                System.out.println(ex);
                showErrorDialog(ex.getMessage());
            }

        }

    }//GEN-LAST:event_jButton1ActionPerformed

    private static void showErrorDialog(String errorMessage) {
        // Crear un JDialog
        JDialog errorDialog = new JDialog((Frame) null, "Error", true);
        errorDialog.setLayout(new BorderLayout());

        // Configurar el mensaje de error en un JTextArea
        JTextArea errorTextArea = new JTextArea(errorMessage);
        errorTextArea.setEditable(false);
        errorTextArea.setWrapStyleWord(true);
        errorTextArea.setLineWrap(true);

        // Añadir el JTextArea al centro del JDialog
        JScrollPane scrollPane = new JScrollPane(errorTextArea);
        errorDialog.add(scrollPane, BorderLayout.CENTER);

        // Botón para cerrar el diálogo
        JButton closeButton = new JButton("Cerrar");
        closeButton.addActionListener(e -> errorDialog.dispose());
        errorDialog.add(closeButton, BorderLayout.SOUTH);

        // Configurar el tamaño y la posición del diálogo
        errorDialog.setSize(400, 200);  // Tamaño inicial
        errorDialog.setMinimumSize(new Dimension(400, 200));  // Tamaño mínimo
        errorDialog.setLocationRelativeTo(null);  // Centrar el diálogo en la pantalla

        // Mostrar el diálogo
        errorDialog.setVisible(true);
    }
    private void cerrarTablaActual() {
        Component selectedComponent = jTabbedPane1.getSelectedComponent();
        if (selectedComponent != null) {
            int confirm = JOptionPane.showConfirmDialog(this, "¿Está seguro de que desea cerrar esta pestaña?", "Confirmar cierre", JOptionPane.YES_NO_OPTION);
            if (confirm == JOptionPane.YES_OPTION) {
                fileMap.remove(selectedComponent);
                jTabbedPane1.remove(selectedComponent);
            }
        }
    }
    
    private void guardarArchivoActual() {
        Component selectedComponent = jTabbedPane1.getSelectedComponent();
        if (selectedComponent != null) {
            File file = fileMap.get(selectedComponent);
            if (file != null) {
                guardarArchivo(file, selectedComponent);
            } else {
                guardarArchivoComo();
            }
        }
    }
    
    private void guardarArchivoComo() {
        Component componenteSeleccionado = jTabbedPane1.getSelectedComponent();
        if (componenteSeleccionado != null) {
            JFileChooser fileChooser = new JFileChooser();
            FileNameExtensionFilter filter = new FileNameExtensionFilter("Archivos Pas (*.pas)", "pas");
            fileChooser.setFileFilter(filter);

            int retornarValor = fileChooser.showSaveDialog(null);
            if (retornarValor == JFileChooser.APPROVE_OPTION) {
                File archivoGuardar = fileChooser.getSelectedFile();
                // Asegurarse de que el archivo tenga la extensión .pas
                if (!archivoGuardar.getName().toLowerCase().endsWith(".pas")) {
                    archivoGuardar = new File(archivoGuardar.getAbsolutePath() + ".pas");
                }
                guardarArchivo(archivoGuardar, componenteSeleccionado);
                fileMap.put(componenteSeleccionado, archivoGuardar); // Actualizar la referencia al archivo abierto
                jTabbedPane1.setTitleAt(jTabbedPane1.getSelectedIndex(), archivoGuardar.getName());
            }
        }
    }
    
    private void guardarArchivo(File file, Component component) {
        JTextPane textPane = (JTextPane) ((JScrollPane) component).getViewport().getView();
        try (FileWriter writer = new FileWriter(file)) {
            writer.write(textPane.getText());
            JOptionPane.showMessageDialog(this, "Archivo guardado exitosamente.", "Éxito", JOptionPane.INFORMATION_MESSAGE);
        } catch (IOException e) {
            JOptionPane.showMessageDialog(this, "Error al guardar el archivo: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private JButton jButton1;
    private JLabel jLabel1;
    private JLabel jLabel2;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenu jMenu4;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JMenuItem jMenuItem2;
    private javax.swing.JMenuItem jMenuItem3;
    private javax.swing.JMenuItem jMenuItem4;
    private javax.swing.JMenuItem jMenuItem5;
    private javax.swing.JMenuItem jMenuItem6;
    private javax.swing.JMenuItem jMenuItem7;
    private javax.swing.JPanel jPanel1;
    private JScrollPane jScrollPane1;
    private JScrollPane jScrollPane2;
    private javax.swing.JTabbedPane jTabbedPane1;
    private JTextPane jTextPane1;
    private JTextPane jTextPane2;
    // End of variables declaration//GEN-END:variables

}
