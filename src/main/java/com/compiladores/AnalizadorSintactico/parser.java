
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package com.compiladores.AnalizadorSintactico;

import java_cup.runtime.*;
import com.compiladores.Abstracto.Instruccion;
import com.compiladores.AnalizadorLexico.Lexico;
import java.util.LinkedList;
import java.util.Arrays;
import java.util.HashMap;
import com.compiladores.Expresiones.Aritmeticas.*;
import com.compiladores.Expresiones.Relacionales.*;
import com.compiladores.Expresiones.Logicas.*;
import com.compiladores.Expresiones.Nativo;
import com.compiladores.Expresiones.Variables.*;
import com.compiladores.Expresiones.Casteos.*;
import com.compiladores.Instrucciones.Print;
import com.compiladores.Instrucciones.Declaracion;
import com.compiladores.Instrucciones.Readln;
import com.compiladores.Instrucciones.Llamada;
import com.compiladores.Instrucciones.Procedure;
import com.compiladores.Instrucciones.Sentencias.Control.*;
import com.compiladores.Instrucciones.Sentencias.Ciclicas.*;
import com.compiladores.Instrucciones.Sentencias.Transferencia.*;
import com.compiladores.Simbolo.Tipo;
import com.compiladores.Simbolo.TipoDato;
import com.compiladores.Excepciones.Errores;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\226\000\002\002\004\000\002\002\012\000\002\003" +
    "\005\000\002\003\004\000\002\003\004\000\002\003\003" +
    "\000\002\040\006\000\002\040\010\000\002\055\003\000" +
    "\002\055\005\000\002\055\003\000\002\004\005\000\002" +
    "\004\002\000\002\004\004\000\002\004\003\000\002\025" +
    "\006\000\002\025\007\000\002\025\003\000\002\025\003" +
    "\000\002\025\003\000\002\025\003\000\002\025\003\000" +
    "\002\025\003\000\002\025\003\000\002\025\003\000\002" +
    "\025\003\000\002\022\005\000\002\022\003\000\002\022" +
    "\003\000\002\052\004\000\002\052\005\000\002\052\005" +
    "\000\002\052\005\000\002\052\005\000\002\052\005\000" +
    "\002\052\005\000\002\052\005\000\002\052\005\000\002" +
    "\052\005\000\002\052\005\000\002\052\005\000\002\052" +
    "\005\000\002\052\005\000\002\052\005\000\002\052\004" +
    "\000\002\052\005\000\002\052\003\000\002\052\003\000" +
    "\002\052\003\000\002\052\003\000\002\052\003\000\002" +
    "\052\003\000\002\052\006\000\002\045\006\000\002\045" +
    "\003\000\002\060\005\000\002\060\003\000\002\060\003" +
    "\000\002\047\003\000\002\047\003\000\002\015\003\000" +
    "\002\015\004\000\002\015\003\000\002\006\003\000\002" +
    "\006\003\000\002\006\003\000\002\006\003\000\002\061" +
    "\004\000\002\017\005\000\002\017\002\000\002\070\002" +
    "\000\002\020\011\000\002\020\013\000\002\062\003\000" +
    "\002\062\002\000\002\062\003\000\002\071\002\000\002" +
    "\063\005\000\002\064\005\000\002\064\002\000\002\064" +
    "\003\000\002\065\010\000\002\065\006\000\002\065\006" +
    "\000\002\065\015\000\002\065\003\000\002\046\010\000" +
    "\002\046\007\000\002\046\006\000\002\046\005\000\002" +
    "\046\003\000\002\072\002\000\002\010\005\000\002\007" +
    "\005\000\002\007\002\000\002\016\010\000\002\016\006" +
    "\000\002\073\002\000\002\013\005\000\002\053\005\000" +
    "\002\053\002\000\002\074\002\000\002\014\006\000\002" +
    "\075\002\000\002\014\006\000\002\076\002\000\002\011" +
    "\005\000\002\012\005\000\002\012\002\000\002\054\010" +
    "\000\002\054\006\000\002\054\006\000\002\054\015\000" +
    "\002\066\005\000\002\066\002\000\002\027\005\000\002" +
    "\027\010\000\002\030\005\000\002\030\010\000\002\032" +
    "\015\000\002\037\010\000\002\033\017\000\002\033\016" +
    "\000\002\033\007\000\002\033\006\000\002\033\004\000" +
    "\002\033\003\000\002\026\006\000\002\026\011\000\002" +
    "\036\015\000\002\041\010\000\002\042\006\000\002\035" +
    "\010\000\002\035\007\000\002\035\007\000\002\021\004" +
    "\000\002\021\003\000\002\024\005\000\002\057\005\000" +
    "\002\057\003\000\002\056\004\000\002\056\006\000\002" +
    "\023\004\000\002\043\003\000\002\044\003\000\002\051" +
    "\003\000\002\051\003\000\002\051\003\000\002\051\003" +
    "\000\002\051\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u0123\000\004\051\005\001\002\000\004\002\u0125\001" +
    "\002\000\004\107\006\001\002\000\004\015\007\001\002" +
    "\000\014\003\020\022\015\023\022\040\016\054\012\001" +
    "\002\000\016\003\uffbf\022\uffbf\023\uffbf\040\uffbf\042\uffbf" +
    "\054\uffbf\001\002\000\016\003\uffc2\022\uffc2\023\uffc2\040" +
    "\uffc2\042\uffc2\054\uffc2\001\002\000\020\003\uffbc\022\uffbc" +
    "\023\uffbc\040\uffbc\042\uffbc\054\uffbc\107\351\001\002\000" +
    "\004\042\170\001\002\000\016\003\uffc0\022\uffc0\023\uffc0" +
    "\040\uffc0\042\uffc0\054\uffc0\001\002\000\020\003\uff98\022" +
    "\uff98\023\uff98\040\uff98\042\uff98\054\uff98\107\uff98\001\002" +
    "\000\020\003\uffa0\022\uffa0\023\uffa0\040\uffa0\042\uffa0\054" +
    "\uffa0\107\uffa0\001\002\000\016\003\020\022\015\023\022" +
    "\040\016\042\uffc5\054\012\001\002\000\004\042\uffc3\001" +
    "\002\000\016\003\uffc1\022\uffc1\023\uffc1\040\uffc1\042\uffc1" +
    "\054\uffc1\001\002\000\020\003\uffa6\022\uffa6\023\uffa6\040" +
    "\uffa6\042\uffa6\054\uffa6\107\uffa6\001\002\000\020\003\uffa3" +
    "\022\uffa3\023\uffa3\040\uffa3\042\uffa3\054\uffa3\107\024\001" +
    "\002\000\010\013\uff8f\014\uff8f\016\031\001\002\000\016" +
    "\003\uffa5\022\uffa5\023\uffa5\040\uffa5\042\uffa5\054\uffa5\001" +
    "\002\000\004\015\027\001\002\000\020\003\uffa3\022\uffa3" +
    "\023\uffa3\040\uffa3\042\uffa3\054\uffa3\107\024\001\002\000" +
    "\016\003\uffa4\022\uffa4\023\uffa4\040\uffa4\042\uffa4\054\uffa4" +
    "\001\002\000\004\107\124\001\002\000\006\013\034\014" +
    "\033\001\002\000\026\005\055\011\056\024\046\025\050" +
    "\066\054\103\047\104\045\105\044\106\053\107\052\001" +
    "\002\000\014\075\042\076\041\077\035\100\037\101\040" +
    "\001\002\000\012\012\uff6f\014\uff6f\015\uff6f\016\uff6f\001" +
    "\002\000\004\014\043\001\002\000\012\012\uff6c\014\uff6c" +
    "\015\uff6c\016\uff6c\001\002\000\012\012\uff6d\014\uff6d\015" +
    "\uff6d\016\uff6d\001\002\000\012\012\uff6e\014\uff6e\015\uff6e" +
    "\016\uff6e\001\002\000\012\012\uff70\014\uff70\015\uff70\016" +
    "\uff70\001\002\000\026\005\055\011\056\024\046\025\050" +
    "\066\054\103\047\104\045\105\044\106\053\107\052\001" +
    "\002\000\062\004\uffd2\005\uffd2\006\uffd2\007\uffd2\012\uffd2" +
    "\013\uffd2\015\uffd2\016\uffd2\026\uffd2\027\uffd2\035\uffd2\037" +
    "\uffd2\041\uffd2\047\uffd2\050\uffd2\055\uffd2\056\uffd2\057\uffd2" +
    "\060\uffd2\061\uffd2\062\uffd2\063\uffd2\064\uffd2\074\uffd2\001" +
    "\002\000\062\004\uffd3\005\uffd3\006\uffd3\007\uffd3\012\uffd3" +
    "\013\uffd3\015\uffd3\016\uffd3\026\uffd3\027\uffd3\035\uffd3\037" +
    "\uffd3\041\uffd3\047\uffd3\050\uffd3\055\uffd3\056\uffd3\057\uffd3" +
    "\060\uffd3\061\uffd3\062\uffd3\063\uffd3\064\uffd3\074\uffd3\001" +
    "\002\000\062\004\uffc7\005\uffc7\006\uffc7\007\uffc7\012\uffc7" +
    "\013\uffc7\015\uffc7\016\uffc7\026\uffc7\027\uffc7\035\uffc7\037" +
    "\uffc7\041\uffc7\047\uffc7\050\uffc7\055\uffc7\056\uffc7\057\uffc7" +
    "\060\uffc7\061\uffc7\062\uffc7\063\uffc7\064\uffc7\074\uffc7\001" +
    "\002\000\062\004\uffd1\005\uffd1\006\uffd1\007\uffd1\012\uffd1" +
    "\013\uffd1\015\uffd1\016\uffd1\026\uffd1\027\uffd1\035\uffd1\037" +
    "\uffd1\041\uffd1\047\uffd1\050\uffd1\055\uffd1\056\uffd1\057\uffd1" +
    "\060\uffd1\061\uffd1\062\uffd1\063\uffd1\064\uffd1\074\uffd1\001" +
    "\002\000\062\004\uffc6\005\uffc6\006\uffc6\007\uffc6\012\uffc6" +
    "\013\uffc6\015\uffc6\016\uffc6\026\uffc6\027\uffc6\035\uffc6\037" +
    "\uffc6\041\uffc6\047\uffc6\050\uffc6\055\uffc6\056\uffc6\057\uffc6" +
    "\060\uffc6\061\uffc6\062\uffc6\063\uffc6\064\uffc6\074\uffc6\001" +
    "\002\000\040\004\064\005\074\006\071\007\065\015\uffa2" +
    "\026\063\027\066\055\072\056\070\057\067\060\077\061" +
    "\076\062\062\063\075\064\061\001\002\000\064\004\uffce" +
    "\005\uffce\006\uffce\007\uffce\012\uffce\013\uffce\015\uffce\016" +
    "\uffce\026\uffce\027\uffce\035\uffce\037\uffce\041\uffce\047\uffce" +
    "\050\uffce\055\uffce\056\uffce\057\uffce\060\uffce\061\uffce\062" +
    "\uffce\063\uffce\064\uffce\073\120\074\uffce\001\002\000\062" +
    "\004\uffd0\005\uffd0\006\uffd0\007\uffd0\012\uffd0\013\uffd0\015" +
    "\uffd0\016\uffd0\026\uffd0\027\uffd0\035\uffd0\037\uffd0\041\uffd0" +
    "\047\uffd0\050\uffd0\055\uffd0\056\uffd0\057\uffd0\060\uffd0\061" +
    "\uffd0\062\uffd0\063\uffd0\064\uffd0\074\uffd0\001\002\000\026" +
    "\005\055\011\056\024\046\025\050\066\054\103\047\104" +
    "\045\105\044\106\053\107\052\001\002\000\026\005\055" +
    "\011\056\024\046\025\050\066\054\103\047\104\045\105" +
    "\044\106\053\107\052\001\002\000\026\005\055\011\056" +
    "\024\046\025\050\066\054\103\047\104\045\105\044\106" +
    "\053\107\052\001\002\000\062\004\uffcf\005\uffcf\006\uffcf" +
    "\007\uffcf\012\uffcf\013\uffcf\015\uffcf\016\uffcf\026\uffcf\027" +
    "\uffcf\035\uffcf\037\uffcf\041\uffcf\047\uffcf\050\uffcf\055\uffcf" +
    "\056\uffcf\057\uffcf\060\uffcf\061\uffcf\062\uffcf\063\uffcf\064" +
    "\uffcf\074\uffcf\001\002\000\040\004\064\005\074\006\071" +
    "\007\065\012\073\026\063\027\066\055\072\056\070\057" +
    "\067\060\077\061\076\062\062\063\075\064\061\001\002" +
    "\000\026\005\055\011\056\024\046\025\050\066\054\103" +
    "\047\104\045\105\044\106\053\107\052\001\002\000\026" +
    "\005\055\011\056\024\046\025\050\066\054\103\047\104" +
    "\045\105\044\106\053\107\052\001\002\000\026\005\055" +
    "\011\056\024\046\025\050\066\054\103\047\104\045\105" +
    "\044\106\053\107\052\001\002\000\026\005\055\011\056" +
    "\024\046\025\050\066\054\103\047\104\045\105\044\106" +
    "\053\107\052\001\002\000\026\005\055\011\056\024\046" +
    "\025\050\066\054\103\047\104\045\105\044\106\053\107" +
    "\052\001\002\000\026\005\055\011\056\024\046\025\050" +
    "\066\054\103\047\104\045\105\044\106\053\107\052\001" +
    "\002\000\026\005\055\011\056\024\046\025\050\066\054" +
    "\103\047\104\045\105\044\106\053\107\052\001\002\000" +
    "\026\005\055\011\056\024\046\025\050\066\054\103\047" +
    "\104\045\105\044\106\053\107\052\001\002\000\026\005" +
    "\055\011\056\024\046\025\050\066\054\103\047\104\045" +
    "\105\044\106\053\107\052\001\002\000\026\005\055\011" +
    "\056\024\046\025\050\066\054\103\047\104\045\105\044" +
    "\106\053\107\052\001\002\000\062\004\uffd4\005\uffd4\006" +
    "\uffd4\007\uffd4\012\uffd4\013\uffd4\015\uffd4\016\uffd4\026\uffd4" +
    "\027\uffd4\035\uffd4\037\uffd4\041\uffd4\047\uffd4\050\uffd4\055" +
    "\uffd4\056\uffd4\057\uffd4\060\uffd4\061\uffd4\062\uffd4\063\uffd4" +
    "\064\uffd4\074\uffd4\001\002\000\026\005\055\011\056\024" +
    "\046\025\050\066\054\103\047\104\045\105\044\106\053" +
    "\107\052\001\002\000\026\005\055\011\056\024\046\025" +
    "\050\066\054\103\047\104\045\105\044\106\053\107\052" +
    "\001\002\000\026\005\055\011\056\024\046\025\050\066" +
    "\054\103\047\104\045\105\044\106\053\107\052\001\002" +
    "\000\026\005\055\011\056\024\046\025\050\066\054\103" +
    "\047\104\045\105\044\106\053\107\052\001\002\000\062" +
    "\004\064\005\074\006\071\007\065\012\uffda\013\uffda\015" +
    "\uffda\016\uffda\026\063\027\066\035\uffda\037\uffda\041\uffda" +
    "\047\uffda\050\uffda\055\uffda\056\uffda\057\uffda\060\uffda\061" +
    "\uffda\062\uffda\063\uffda\064\uffda\074\uffda\001\002\000\062" +
    "\004\064\005\074\006\071\007\065\012\uffd9\013\uffd9\015" +
    "\uffd9\016\uffd9\026\063\027\066\035\uffd9\037\uffd9\041\uffd9" +
    "\047\uffd9\050\uffd9\055\uffd9\056\uffd9\057\uffd9\060\uffd9\061" +
    "\uffd9\062\uffd9\063\uffd9\064\uffd9\074\uffd9\001\002\000\062" +
    "\004\064\005\074\006\071\007\065\012\uffd7\013\uffd7\015" +
    "\uffd7\016\uffd7\026\063\027\066\035\uffd7\037\uffd7\041\uffd7" +
    "\047\uffd7\050\uffd7\055\072\056\070\057\067\060\077\061" +
    "\076\062\062\063\uffd7\064\061\074\uffd7\001\002\000\062" +
    "\004\uffe0\005\uffe0\006\071\007\065\012\uffe0\013\uffe0\015" +
    "\uffe0\016\uffe0\026\063\027\066\035\uffe0\037\uffe0\041\uffe0" +
    "\047\uffe0\050\uffe0\055\uffe0\056\uffe0\057\uffe0\060\uffe0\061" +
    "\uffe0\062\uffe0\063\uffe0\064\uffe0\074\uffe0\001\002\000\062" +
    "\004\064\005\074\006\071\007\065\012\uffdd\013\uffdd\015" +
    "\uffdd\016\uffdd\026\063\027\066\035\uffdd\037\uffdd\041\uffdd" +
    "\047\uffdd\050\uffdd\055\uffdd\056\uffdd\057\uffdd\060\uffdd\061" +
    "\uffdd\062\uffdd\063\uffdd\064\uffdd\074\uffdd\001\002\000\062" +
    "\004\uffde\005\uffde\006\uffde\007\uffde\012\uffde\013\uffde\015" +
    "\uffde\016\uffde\026\063\027\uffde\035\uffde\037\uffde\041\uffde" +
    "\047\uffde\050\uffde\055\uffde\056\uffde\057\uffde\060\uffde\061" +
    "\uffde\062\uffde\063\uffde\064\uffde\074\uffde\001\002\000\062" +
    "\004\064\005\074\006\071\007\065\012\uffdc\013\uffdc\015" +
    "\uffdc\016\uffdc\026\063\027\066\035\uffdc\037\uffdc\041\uffdc" +
    "\047\uffdc\050\uffdc\055\uffdc\056\uffdc\057\uffdc\060\uffdc\061" +
    "\uffdc\062\uffdc\063\uffdc\064\uffdc\074\uffdc\001\002\000\062" +
    "\004\064\005\074\006\071\007\065\012\uffdb\013\uffdb\015" +
    "\uffdb\016\uffdb\026\063\027\066\035\uffdb\037\uffdb\041\uffdb" +
    "\047\uffdb\050\uffdb\055\uffdb\056\uffdb\057\uffdb\060\uffdb\061" +
    "\uffdb\062\uffdb\063\uffdb\064\uffdb\074\uffdb\001\002\000\062" +
    "\004\uffe2\005\uffe2\006\uffe2\007\uffe2\012\uffe2\013\uffe2\015" +
    "\uffe2\016\uffe2\026\063\027\uffe2\035\uffe2\037\uffe2\041\uffe2" +
    "\047\uffe2\050\uffe2\055\uffe2\056\uffe2\057\uffe2\060\uffe2\061" +
    "\uffe2\062\uffe2\063\uffe2\064\uffe2\074\uffe2\001\002\000\062" +
    "\004\uffdf\005\uffdf\006\uffdf\007\uffdf\012\uffdf\013\uffdf\015" +
    "\uffdf\016\uffdf\026\063\027\uffdf\035\uffdf\037\uffdf\041\uffdf" +
    "\047\uffdf\050\uffdf\055\uffdf\056\uffdf\057\uffdf\060\uffdf\061" +
    "\uffdf\062\uffdf\063\uffdf\064\uffdf\074\uffdf\001\002\000\062" +
    "\004\uffe1\005\uffe1\006\071\007\065\012\uffe1\013\uffe1\015" +
    "\uffe1\016\uffe1\026\063\027\066\035\uffe1\037\uffe1\041\uffe1" +
    "\047\uffe1\050\uffe1\055\uffe1\056\uffe1\057\uffe1\060\uffe1\061" +
    "\uffe1\062\uffe1\063\uffe1\064\uffe1\074\uffe1\001\002\000\060" +
    "\004\uffe3\005\uffe3\006\uffe3\007\uffe3\012\uffe3\013\uffe3\015" +
    "\uffe3\016\uffe3\027\uffe3\035\uffe3\037\uffe3\041\uffe3\047\uffe3" +
    "\050\uffe3\055\uffe3\056\uffe3\057\uffe3\060\uffe3\061\uffe3\062" +
    "\uffe3\063\uffe3\064\uffe3\074\uffe3\001\002\000\062\004\064" +
    "\005\074\006\071\007\065\012\uffd8\013\uffd8\015\uffd8\016" +
    "\uffd8\026\063\027\066\035\uffd8\037\uffd8\041\uffd8\047\uffd8" +
    "\050\uffd8\055\uffd8\056\uffd8\057\uffd8\060\uffd8\061\uffd8\062" +
    "\uffd8\063\uffd8\064\uffd8\074\uffd8\001\002\000\062\004\064" +
    "\005\074\006\071\007\065\012\uffd6\013\uffd6\015\uffd6\016" +
    "\uffd6\026\063\027\066\035\uffd6\037\uffd6\041\uffd6\047\uffd6" +
    "\050\uffd6\055\072\056\070\057\067\060\077\061\076\062" +
    "\062\063\uffd6\064\uffd6\074\uffd6\001\002\000\062\004\uffe4" +
    "\005\uffe4\006\uffe4\007\uffe4\012\uffe4\013\uffe4\015\uffe4\016" +
    "\uffe4\026\uffe4\027\uffe4\035\uffe4\037\uffe4\041\uffe4\047\uffe4" +
    "\050\uffe4\055\uffe4\056\uffe4\057\uffe4\060\uffe4\061\uffe4\062" +
    "\uffe4\063\uffe4\064\uffe4\074\uffe4\001\002\000\062\004\064" +
    "\005\074\006\071\007\065\012\uffd5\013\uffd5\015\uffd5\016" +
    "\uffd5\026\063\027\066\035\uffd5\037\uffd5\041\uffd5\047\uffd5" +
    "\050\uffd5\055\072\056\070\057\067\060\077\061\076\062" +
    "\062\063\uffd5\064\uffd5\074\uffd5\001\002\000\026\005\055" +
    "\011\056\024\046\025\050\066\054\103\047\104\045\105" +
    "\044\106\053\107\052\001\002\000\040\004\064\005\074" +
    "\006\071\007\065\026\063\027\066\055\072\056\070\057" +
    "\067\060\077\061\076\062\062\063\075\064\061\074\122" +
    "\001\002\000\062\004\uffcd\005\uffcd\006\uffcd\007\uffcd\012" +
    "\uffcd\013\uffcd\015\uffcd\016\uffcd\026\uffcd\027\uffcd\035\uffcd" +
    "\037\uffcd\041\uffcd\047\uffcd\050\uffcd\055\uffcd\056\uffcd\057" +
    "\uffcd\060\uffcd\061\uffcd\062\uffcd\063\uffcd\064\uffcd\074\uffcd" +
    "\001\002\000\040\004\064\005\074\006\071\007\065\015" +
    "\uffa1\026\063\027\066\055\072\056\070\057\067\060\077" +
    "\061\076\062\062\063\075\064\061\001\002\000\012\012" +
    "\uff8f\013\uff8f\014\uff8f\016\031\001\002\000\010\012\uff90" +
    "\013\uff90\014\uff90\001\002\000\004\042\uffc4\001\002\000" +
    "\020\003\uff9d\022\uff9d\023\uff9d\040\uff9d\042\uff9d\054\uff9d" +
    "\107\130\001\002\000\006\014\uff9a\016\135\001\002\000" +
    "\016\003\uff9f\022\uff9f\023\uff9f\040\uff9f\042\uff9f\054\uff9f" +
    "\001\002\000\004\015\133\001\002\000\020\003\uff9d\022" +
    "\uff9d\023\uff9d\040\uff9d\042\uff9d\054\uff9d\107\130\001\002" +
    "\000\016\003\uff9e\022\uff9e\023\uff9e\040\uff9e\042\uff9e\054" +
    "\uff9e\001\002\000\004\107\uff9c\001\002\000\004\014\137" +
    "\001\002\000\014\075\042\076\041\077\035\100\037\101" +
    "\040\001\002\000\004\015\uff99\001\002\000\004\107\130" +
    "\001\002\000\004\015\uff9b\001\002\000\020\003\uff95\022" +
    "\uff95\023\uff95\040\uff95\042\uff95\054\uff95\107\144\001\002" +
    "\000\010\013\uff8f\014\uff8f\016\031\001\002\000\016\003" +
    "\uff97\022\uff97\023\uff97\040\uff97\042\uff97\054\uff97\001\002" +
    "\000\004\015\147\001\002\000\020\003\uff95\022\uff95\023" +
    "\uff95\040\uff95\042\uff95\054\uff95\107\144\001\002\000\016" +
    "\003\uff96\022\uff96\023\uff96\040\uff96\042\uff96\054\uff96\001" +
    "\002\000\006\013\153\014\152\001\002\000\026\005\055" +
    "\011\056\024\046\025\050\066\054\103\047\104\045\105" +
    "\044\106\053\107\052\001\002\000\016\046\155\075\042" +
    "\076\041\077\035\100\037\101\040\001\002\000\006\014" +
    "\165\015\uff92\001\002\000\004\073\156\001\002\000\004" +
    "\104\157\001\002\000\004\020\160\001\002\000\004\104" +
    "\161\001\002\000\004\074\162\001\002\000\004\041\163" +
    "\001\002\000\014\075\042\076\041\077\035\100\037\101" +
    "\040\001\002\000\004\015\uff91\001\002\000\026\005\055" +
    "\011\056\024\046\025\050\066\054\103\047\104\045\105" +
    "\044\106\053\107\052\001\002\000\040\004\064\005\074" +
    "\006\071\007\065\015\uff94\026\063\027\066\055\072\056" +
    "\070\057\067\060\077\061\076\062\062\063\075\064\061" +
    "\001\002\000\040\004\064\005\074\006\071\007\065\015" +
    "\uff93\026\063\027\066\055\072\056\070\057\067\060\077" +
    "\061\076\062\062\063\075\064\061\001\002\000\030\003" +
    "\212\031\203\032\211\033\174\034\214\052\215\102\200" +
    "\107\205\110\176\111\210\112\172\001\002\000\030\031" +
    "\203\032\211\033\174\034\214\043\345\052\215\102\200" +
    "\107\205\110\176\111\210\112\172\001\002\000\006\015" +
    "\uff71\037\uff71\001\002\000\006\015\uffea\037\uffea\001\002" +
    "\000\026\005\055\011\056\024\046\025\050\066\054\103" +
    "\047\104\045\105\044\106\053\107\052\001\002\000\006" +
    "\015\uffef\037\uffef\001\002\000\004\011\334\001\002\000" +
    "\004\015\333\001\002\000\004\011\324\001\002\000\006" +
    "\015\uffe9\037\uffe9\001\002\000\006\015\uffee\037\uffee\001" +
    "\002\000\026\005\055\011\056\024\046\025\050\066\054" +
    "\103\047\104\045\105\044\106\053\107\052\001\002\000" +
    "\006\015\ufff0\037\ufff0\001\002\000\014\011\273\013\272" +
    "\015\uffcb\037\uffcb\073\274\001\002\000\006\015\uffe8\037" +
    "\uffe8\001\002\000\006\015\uffed\037\uffed\001\002\000\006" +
    "\015\uff72\037\uff72\001\002\000\026\005\055\011\056\024" +
    "\046\025\050\066\054\103\047\104\045\105\044\106\053" +
    "\107\052\001\002\000\032\015\241\031\ufffc\032\ufffc\033" +
    "\ufffc\034\ufffc\043\ufffc\052\ufffc\102\ufffc\107\ufffc\110\ufffc" +
    "\111\ufffc\112\ufffc\001\002\000\006\015\uffec\037\uffec\001" +
    "\002\000\004\107\227\001\002\000\032\003\221\031\203" +
    "\032\211\033\174\034\214\052\215\053\ufff5\102\200\107" +
    "\205\110\176\111\210\112\172\001\002\000\006\015\uffeb" +
    "\037\uffeb\001\002\000\004\053\225\001\002\000\004\015" +
    "\223\001\002\000\010\015\222\043\ufff3\053\ufff3\001\002" +
    "\000\006\043\ufff4\053\ufff4\001\002\000\034\003\221\031" +
    "\203\032\211\033\174\034\214\043\ufff5\052\215\053\ufff5" +
    "\102\200\107\205\110\176\111\210\112\172\001\002\000" +
    "\006\043\ufff6\053\ufff6\001\002\000\026\005\055\011\056" +
    "\024\046\025\050\066\054\103\047\104\045\105\044\106" +
    "\053\107\052\001\002\000\042\004\064\005\074\006\071" +
    "\007\065\015\uff7e\026\063\027\066\037\uff7e\055\072\056" +
    "\070\057\067\060\077\061\076\062\062\063\075\064\061" +
    "\001\002\000\004\013\230\001\002\000\004\014\231\001" +
    "\002\000\026\005\055\011\056\024\046\025\050\066\054" +
    "\103\047\104\045\105\044\106\053\107\052\001\002\000" +
    "\040\004\064\005\074\006\071\007\065\026\063\027\066" +
    "\050\233\055\072\056\070\057\067\060\077\061\076\062" +
    "\062\063\075\064\061\001\002\000\026\005\055\011\056" +
    "\024\046\025\050\066\054\103\047\104\045\105\044\106" +
    "\053\107\052\001\002\000\040\004\064\005\074\006\071" +
    "\007\065\026\063\027\066\035\235\055\072\056\070\057" +
    "\067\060\077\061\076\062\062\063\075\064\061\001\002" +
    "\000\004\042\236\001\002\000\032\003\221\031\203\032" +
    "\211\033\174\034\214\043\ufff5\052\215\102\200\107\205" +
    "\110\176\111\210\112\172\001\002\000\004\043\240\001" +
    "\002\000\006\015\uff80\037\uff80\001\002\000\030\031\ufffd" +
    "\032\ufffd\033\ufffd\034\ufffd\043\ufffd\052\ufffd\102\ufffd\107" +
    "\ufffd\110\ufffd\111\ufffd\112\ufffd\001\002\000\040\004\064" +
    "\005\074\006\071\007\065\026\063\027\066\041\243\055" +
    "\072\056\070\057\067\060\077\061\076\062\062\063\075" +
    "\064\061\001\002\000\030\005\055\011\056\024\046\025" +
    "\050\037\250\066\054\103\047\104\045\105\044\106\053" +
    "\107\052\001\002\000\004\013\262\001\002\000\032\005" +
    "\uff79\011\uff79\024\uff79\025\uff79\037\uff79\043\uff79\066\uff79" +
    "\103\uff79\104\uff79\105\uff79\106\uff79\107\uff79\001\002\000" +
    "\032\005\055\011\056\024\046\025\050\037\250\043\260" +
    "\066\054\103\047\104\045\105\044\106\053\107\052\001" +
    "\002\000\042\004\064\005\074\006\071\007\065\013\uff76" +
    "\016\254\026\063\027\066\055\072\056\070\057\067\060" +
    "\077\061\076\062\062\063\075\064\061\001\002\000\032" +
    "\003\221\031\203\032\211\033\174\034\214\043\ufff5\052" +
    "\215\102\200\107\205\110\176\111\210\112\172\001\002" +
    "\000\004\043\252\001\002\000\006\015\uff7b\037\uff7b\001" +
    "\002\000\004\043\uff73\001\002\000\026\005\055\011\056" +
    "\024\046\025\050\066\054\103\047\104\045\105\044\106" +
    "\053\107\052\001\002\000\004\013\uff77\001\002\000\032" +
    "\005\uff7a\011\uff7a\024\uff7a\025\uff7a\037\uff7a\043\uff7a\066" +
    "\uff7a\103\uff7a\104\uff7a\105\uff7a\106\uff7a\107\uff7a\001\002" +
    "\000\004\043\261\001\002\000\006\015\uff7c\037\uff7c\001" +
    "\002\000\006\015\uff7d\037\uff7d\001\002\000\030\031\203" +
    "\032\211\033\174\034\214\042\264\052\215\102\200\107" +
    "\205\110\176\111\210\112\172\001\002\000\004\015\271" +
    "\001\002\000\032\003\221\031\203\032\211\033\174\034" +
    "\214\043\ufff5\052\215\102\200\107\205\110\176\111\210" +
    "\112\172\001\002\000\032\005\uff78\011\uff78\024\uff78\025" +
    "\uff78\037\uff78\043\uff78\066\uff78\103\uff78\104\uff78\105\uff78" +
    "\106\uff78\107\uff78\001\002\000\004\043\267\001\002\000" +
    "\004\015\270\001\002\000\032\005\uff74\011\uff74\024\uff74" +
    "\025\uff74\037\uff74\043\uff74\066\uff74\103\uff74\104\uff74\105" +
    "\uff74\106\uff74\107\uff74\001\002\000\032\005\uff75\011\uff75" +
    "\024\uff75\025\uff75\037\uff75\043\uff75\066\uff75\103\uff75\104" +
    "\uff75\105\uff75\106\uff75\107\uff75\001\002\000\004\014\310" +
    "\001\002\000\030\003\303\005\055\011\056\024\046\025" +
    "\050\066\054\103\047\104\045\105\044\106\053\107\052" +
    "\001\002\000\026\005\055\011\056\024\046\025\050\066" +
    "\054\103\047\104\045\105\044\106\053\107\052\001\002" +
    "\000\040\004\064\005\074\006\071\007\065\026\063\027" +
    "\066\055\072\056\070\057\067\060\077\061\076\062\062" +
    "\063\075\064\061\074\276\001\002\000\004\013\277\001" +
    "\002\000\004\014\300\001\002\000\026\005\055\011\056" +
    "\024\046\025\050\066\054\103\047\104\045\105\044\106" +
    "\053\107\052\001\002\000\042\004\064\005\074\006\071" +
    "\007\065\015\uff81\026\063\027\066\037\uff81\055\072\056" +
    "\070\057\067\060\077\061\076\062\062\063\075\064\061" +
    "\001\002\000\042\004\064\005\074\006\071\007\065\012" +
    "\uffc9\016\uffc9\026\063\027\066\055\072\056\070\057\067" +
    "\060\077\061\076\062\062\063\075\064\061\001\002\000" +
    "\006\012\uffc8\016\uffc8\001\002\000\006\012\306\016\305" +
    "\001\002\000\026\005\055\011\056\024\046\025\050\066" +
    "\054\103\047\104\045\105\044\106\053\107\052\001\002" +
    "\000\006\015\uffcc\037\uffcc\001\002\000\042\004\064\005" +
    "\074\006\071\007\065\012\uffca\016\uffca\026\063\027\066" +
    "\055\072\056\070\057\067\060\077\061\076\062\062\063" +
    "\075\064\061\001\002\000\026\005\055\011\056\024\046" +
    "\025\050\066\054\103\047\104\045\105\044\106\053\107" +
    "\052\001\002\000\042\004\064\005\074\006\071\007\065" +
    "\015\uff82\026\063\027\066\037\uff82\055\072\056\070\057" +
    "\067\060\077\061\076\062\062\063\075\064\061\001\002" +
    "\000\040\004\064\005\074\006\071\007\065\026\063\027" +
    "\066\047\313\055\072\056\070\057\067\060\077\061\076" +
    "\062\062\063\075\064\061\001\002\000\032\003\316\031" +
    "\203\032\211\033\174\034\214\042\315\052\215\102\200" +
    "\107\205\110\176\111\210\112\172\001\002\000\006\015" +
    "\ufff9\037\ufff9\001\002\000\032\003\221\031\203\032\211" +
    "\033\174\034\214\043\ufff5\052\215\102\200\107\205\110" +
    "\176\111\210\112\172\001\002\000\006\015\ufff7\037\ufff7" +
    "\001\002\000\006\015\ufffb\037\320\001\002\000\032\003" +
    "\316\031\203\032\211\033\174\034\214\042\315\052\215" +
    "\102\200\107\205\110\176\111\210\112\172\001\002\000" +
    "\006\015\ufffa\037\ufffa\001\002\000\004\043\323\001\002" +
    "\000\006\015\ufff8\037\ufff8\001\002\000\030\003\326\005" +
    "\055\011\056\024\046\025\050\066\054\103\047\104\045" +
    "\105\044\106\053\107\052\001\002\000\042\004\064\005" +
    "\074\006\071\007\065\012\uffe6\016\331\026\063\027\066" +
    "\055\072\056\070\057\067\060\077\061\076\062\062\063" +
    "\075\064\061\001\002\000\004\012\uffe5\001\002\000\004" +
    "\012\330\001\002\000\006\015\ufff2\037\ufff2\001\002\000" +
    "\030\003\326\005\055\011\056\024\046\025\050\066\054" +
    "\103\047\104\045\105\044\106\053\107\052\001\002\000" +
    "\004\012\uffe7\001\002\000\030\031\ufffe\032\ufffe\033\ufffe" +
    "\034\ufffe\043\ufffe\052\ufffe\102\ufffe\107\ufffe\110\ufffe\111" +
    "\ufffe\112\ufffe\001\002\000\004\107\335\001\002\000\006" +
    "\012\uff8f\016\031\001\002\000\004\012\337\001\002\000" +
    "\006\015\ufff1\037\ufff1\001\002\000\040\004\064\005\074" +
    "\006\071\007\065\026\063\027\066\035\341\055\072\056" +
    "\070\057\067\060\077\061\076\062\062\063\075\064\061" +
    "\001\002\000\004\042\342\001\002\000\032\003\221\031" +
    "\203\032\211\033\174\034\214\043\ufff5\052\215\102\200" +
    "\107\205\110\176\111\210\112\172\001\002\000\004\043" +
    "\344\001\002\000\006\015\uff7f\037\uff7f\001\002\000\004" +
    "\017\350\001\002\000\004\015\347\001\002\000\030\031" +
    "\uffff\032\uffff\033\uffff\034\uffff\043\uffff\052\uffff\102\uffff" +
    "\107\uffff\110\uffff\111\uffff\112\uffff\001\002\000\004\002" +
    "\000\001\002\000\006\011\357\015\uffbb\001\002\000\004" +
    "\015\354\001\002\000\016\003\uffbe\022\uffbe\023\uffbe\040" +
    "\uffbe\042\uffbe\054\uffbe\001\002\000\020\003\uffbc\022\uffbc" +
    "\023\uffbc\040\uffbc\042\uffbc\054\uffbc\107\351\001\002\000" +
    "\016\003\uffbd\022\uffbd\023\uffbd\040\uffbd\042\uffbd\054\uffbd" +
    "\001\002\000\004\015\u0120\001\002\000\010\003\362\022" +
    "\360\107\361\001\002\000\004\107\u011d\001\002\000\004" +
    "\013\u011b\001\002\000\006\012\uffa7\016\uffa7\001\002\000" +
    "\006\012\365\016\364\001\002\000\006\022\u0114\107\u0115" +
    "\001\002\000\004\015\366\001\002\000\010\003\370\022" +
    "\367\042\uffb7\001\002\000\010\003\uffb5\042\uffb5\107\uffb5" +
    "\001\002\000\004\042\uffb6\001\002\000\004\042\373\001" +
    "\002\000\004\042\uffb8\001\002\000\032\003\221\031\203" +
    "\032\211\033\174\034\214\043\ufff5\052\215\102\200\107" +
    "\205\110\176\111\210\112\172\001\002\000\004\043\375" +
    "\001\002\000\004\015\uffb9\001\002\000\010\003\u0100\042" +
    "\uffb2\107\377\001\002\000\010\013\uff8f\014\uff8f\016\031" +
    "\001\002\000\006\015\uffac\042\uffb1\001\002\000\004\015" +
    "\u0103\001\002\000\004\042\uffb4\001\002\000\010\003\u0100" +
    "\042\uffb2\107\377\001\002\000\004\042\uffb3\001\002\000" +
    "\006\013\u0107\014\u0106\001\002\000\026\005\055\011\056" +
    "\024\046\025\050\066\054\103\047\104\045\105\044\106" +
    "\053\107\052\001\002\000\016\046\u0109\075\042\076\041" +
    "\077\035\100\037\101\040\001\002\000\006\014\u0111\015" +
    "\uffae\001\002\000\004\073\u010a\001\002\000\004\104\u010b" +
    "\001\002\000\004\020\u010c\001\002\000\004\104\u010d\001" +
    "\002\000\004\074\u010e\001\002\000\004\041\u010f\001\002" +
    "\000\014\075\042\076\041\077\035\100\037\101\040\001" +
    "\002\000\004\015\uffad\001\002\000\026\005\055\011\056" +
    "\024\046\025\050\066\054\103\047\104\045\105\044\106" +
    "\053\107\052\001\002\000\040\004\064\005\074\006\071" +
    "\007\065\015\uffb0\026\063\027\066\055\072\056\070\057" +
    "\067\060\077\061\076\062\062\063\075\064\061\001\002" +
    "\000\040\004\064\005\074\006\071\007\065\015\uffaf\026" +
    "\063\027\066\055\072\056\070\057\067\060\077\061\076" +
    "\062\062\063\075\064\061\001\002\000\004\107\u0118\001" +
    "\002\000\004\013\u0116\001\002\000\014\075\042\076\041" +
    "\077\035\100\037\101\040\001\002\000\006\012\uffaa\016" +
    "\uffaa\001\002\000\004\013\u0119\001\002\000\014\075\042" +
    "\076\041\077\035\100\037\101\040\001\002\000\006\012" +
    "\uffab\016\uffab\001\002\000\014\075\042\076\041\077\035" +
    "\100\037\101\040\001\002\000\006\012\uffa8\016\uffa8\001" +
    "\002\000\004\013\u011e\001\002\000\014\075\042\076\041" +
    "\077\035\100\037\101\040\001\002\000\006\012\uffa9\016" +
    "\uffa9\001\002\000\010\003\370\022\367\042\uffb7\001\002" +
    "\000\004\042\u0122\001\002\000\032\003\221\031\203\032" +
    "\211\033\174\034\214\043\ufff5\052\215\102\200\107\205" +
    "\110\176\111\210\112\172\001\002\000\004\043\u0124\001" +
    "\002\000\004\015\uffba\001\002\000\004\002\001\001\002" +
    "" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u0123\000\004\002\003\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\016\006\016\010\010" +
    "\011\013\013\020\015\012\061\007\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\017\352\020\351\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\076\142\001" +
    "\001\000\004\073\126\001\001\000\016\006\016\010\010" +
    "\011\013\013\020\015\125\061\007\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\072\022\001\001\000\006" +
    "\007\024\016\025\001\001\000\004\066\031\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\007\027\016\025" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\047\056\052\122\001\001\000\004\051\035" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\047\056\052\050\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\047\056\052\116\001\001\000\006\047\056" +
    "\052\115\001\001\000\006\047\056\052\057\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\047\056\052\114" +
    "\001\001\000\006\047\056\052\113\001\001\000\006\047" +
    "\056\052\112\001\001\000\006\047\056\052\111\001\001" +
    "\000\006\047\056\052\110\001\001\000\006\047\056\052" +
    "\107\001\001\000\006\047\056\052\106\001\001\000\006" +
    "\047\056\052\105\001\001\000\006\047\056\052\104\001" +
    "\001\000\006\047\056\052\103\001\001\000\002\001\001" +
    "\000\006\047\056\052\102\001\001\000\006\047\056\052" +
    "\101\001\001\000\006\047\056\052\100\001\001\000\006" +
    "\047\056\052\077\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\047\056\052\120\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\066\124\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\014\131\053\130\001\001\000\004\075\135\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\014\131" +
    "\053\133\001\001\000\002\001\001\000\004\074\140\001" +
    "\001\000\002\001\001\000\004\051\137\001\001\000\002" +
    "\001\001\000\004\014\141\001\001\000\002\001\001\000" +
    "\006\012\144\054\145\001\001\000\004\066\150\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\012\147\054" +
    "\145\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\047\056\052\166\001\001\000\004\051\153\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\051\163\001\001\000\002\001\001\000\006" +
    "\047\056\052\165\001\001\000\002\001\001\000\002\001" +
    "\001\000\030\003\170\025\176\026\203\035\201\036\206" +
    "\040\174\041\212\042\215\043\172\044\200\045\205\001" +
    "\001\000\026\025\345\026\203\035\201\036\206\040\174" +
    "\041\212\042\215\043\172\044\200\045\205\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\047\056\052\337" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\047\056\052\311\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\047\056\052\241\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\030\004\216" +
    "\025\217\026\203\035\201\036\206\040\174\041\212\042" +
    "\215\043\172\044\200\045\205\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\030\004\223\025\217\026\203\035\201" +
    "\036\206\040\174\041\212\042\215\043\172\044\200\045" +
    "\205\001\001\000\002\001\001\000\006\047\056\052\225" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\047\056\052\231\001\001\000\002\001\001" +
    "\000\006\047\056\052\233\001\001\000\002\001\001\000" +
    "\002\001\001\000\030\004\236\025\217\026\203\035\201" +
    "\036\206\040\174\041\212\042\215\043\172\044\200\045" +
    "\205\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\016\021\245\023\250\024" +
    "\244\047\056\052\246\057\243\001\001\000\002\001\001" +
    "\000\002\001\001\000\014\023\256\024\255\047\056\052" +
    "\246\057\243\001\001\000\002\001\001\000\030\004\252" +
    "\025\217\026\203\035\201\036\206\040\174\041\212\042" +
    "\215\043\172\044\200\045\205\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\047\056\052" +
    "\246\057\254\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\030\025\262\026\203\035\201\036\206\040\174\041\212" +
    "\042\215\043\172\044\200\045\205\056\264\001\001\000" +
    "\002\001\001\000\030\004\265\025\217\026\203\035\201" +
    "\036\206\040\174\041\212\042\215\043\172\044\200\045" +
    "\205\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\047\056\052\301\060\303\001\001\000\006" +
    "\047\056\052\274\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\047\056\052\300\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\047\056\052\306\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\047\056\052\310\001" +
    "\001\000\002\001\001\000\002\001\001\000\030\025\313" +
    "\026\203\035\201\036\206\040\174\041\212\042\215\043" +
    "\172\044\200\045\205\055\316\001\001\000\002\001\001" +
    "\000\030\004\321\025\217\026\203\035\201\036\206\040" +
    "\174\041\212\042\215\043\172\044\200\045\205\001\001" +
    "\000\002\001\001\000\002\001\001\000\030\025\313\026" +
    "\203\035\201\036\206\040\174\041\212\042\215\043\172" +
    "\044\200\045\205\055\320\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\022\326\047\056" +
    "\052\324\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\022\331\047\056" +
    "\052\324\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\066\335\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\030\004\342\025\217\026\203\035\201\036\206\040\174" +
    "\041\212\042\215\043\172\044\200\045\205\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\070" +
    "\355\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\017\354\020\351\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\046\362\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\062\370\063\371\001\001" +
    "\000\004\071\375\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\030\004\373\025\217\026\203" +
    "\035\201\036\206\040\174\041\212\042\215\043\172\044" +
    "\200\045\205\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\064\u0101\065\u0100\001\001\000\004\066\u0104\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\064\u0103\065\u0100\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\047\056\052\u0112\001\001\000\004" +
    "\051\u0107\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\051\u010f\001\001\000" +
    "\002\001\001\000\006\047\056\052\u0111\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\051\u0116\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\051\u0119\001\001\000\002\001\001\000" +
    "\004\051\u011b\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\051\u011e\001\001\000\002\001\001\000\006\062" +
    "\u0120\063\371\001\001\000\002\001\001\000\030\004\u0122" +
    "\025\217\026\203\035\201\036\206\040\174\041\212\042" +
    "\215\043\172\044\200\045\205\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    Lexico s;
    parser(Lexico s){this.s = s;}

    public LinkedList<Errores> listaErrores = new LinkedList<>();
    
    public void syntax_error(Symbol s){

        listaErrores.add(new Errores("SINTACTICO RECUPERABLE", "No se esperaba el componente "+ s.value, s.left, s.right));

        System.out.println("> Error Sintactico en la linea " + (s.left) + " y columna " + (s.right) + ". No se esperaba el componente: " + (s.value) + ".");
    }

    public void unrecovered_syntax_error (Symbol s){
        listaErrores.add(new Errores("SINTACTICO NO RECUPERABLE","No se esperaba el componente "+ s.value, s.left, s.right));    

        System.out.println("> Error Sintactico no recuperable en la linea" + (s.left) + " y columna " + (s.right) + ". No se esperaba el componente: " + (s.value) + ".");

    }



/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {


    String tipoD = "";
    String idacumulado = "";

  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= ini EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Instruccion> start_val = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // ini ::= PROGRAM ID CIERRE declaraciones BEGIN instrucciones END PUNTO 
            {
              LinkedList<Instruccion> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		LinkedList<Instruccion> a = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		LinkedList<Instruccion> c = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 /*if (b!= null){a.addAll(b);}*/ a.addAll(c); RESULT = a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ini",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // instrucciones ::= instrucciones instruccion CIERRE 
            {
              LinkedList<Instruccion> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		LinkedList<Instruccion> a = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = a; RESULT.add(b); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instrucciones",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // instrucciones ::= instruccion CIERRE 
            {
              LinkedList<Instruccion> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new LinkedList<>(); RESULT.add(a); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instrucciones",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // instrucciones ::= error CIERRE 
            {
              LinkedList<Instruccion> RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("instrucciones",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // instrucciones ::= error 
            {
              LinkedList<Instruccion> RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("instrucciones",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // sif ::= IF expresion THEN iftipos 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		LinkedList<Instruccion> b = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = new IF(a, b, aleft, aright);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sif",30, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // sif ::= IF expresion THEN iftipos ELSE iftipos 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		LinkedList<Instruccion> b = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		LinkedList<Instruccion> c = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new IF(a, b,c, aleft, aright);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sif",30, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // iftipos ::= instruccion 
            {
              LinkedList<Instruccion> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new LinkedList<>(); RESULT.add(a); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("iftipos",43, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // iftipos ::= BEGIN instruccionesincierre END 
            {
              LinkedList<Instruccion> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Instruccion> a = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT =a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("iftipos",43, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // iftipos ::= error 
            {
              LinkedList<Instruccion> RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("iftipos",43, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // instruccionesincierre ::= instruccion CIERRE instruccionesincierre 
            {
              LinkedList<Instruccion> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		LinkedList<Instruccion> b = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 if (b != null){b.addFirst(a); RESULT = b;} else{ b = new LinkedList<>(Arrays.asList(a));  RESULT = b;}
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruccionesincierre",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // instruccionesincierre ::= 
            {
              LinkedList<Instruccion> RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruccionesincierre",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // instruccionesincierre ::= error CIERRE 
            {
              LinkedList<Instruccion> RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruccionesincierre",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // instruccionesincierre ::= error 
            {
              LinkedList<Instruccion> RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruccionesincierre",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // instruccion ::= IMPRIMIR PARA listprint PARC 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		   RESULT = new Print(a, aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruccion",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // instruccion ::= LEER PARA ID listaids PARC 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<String> b = (LinkedList<String>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 b = new LinkedList<>(Arrays.asList(a)); b.add(a); RESULT = new Readln(b, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruccion",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // instruccion ::= asignacion 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruccion",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // instruccion ::= sif 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruccion",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // instruccion ::= scase 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruccion",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // instruccion ::= cfor 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruccion",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // instruccion ::= swhile 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruccion",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // instruccion ::= srepeat 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruccion",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // instruccion ::= sbreak 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruccion",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // instruccion ::= scontinue 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruccion",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // instruccion ::= llamadas 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruccion",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // listprint ::= expresion COMA listprint 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new Union(a, b, OperadoresAritmeticos.SUMA, aleft, aright);     
              CUP$parser$result = parser.getSymbolFactory().newSymbol("listprint",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // listprint ::= expresion 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = a;  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("listprint",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // listprint ::= error 
            {
              Instruccion RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("listprint",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // expresion ::= RESTA expresion 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = new Aritmeticas(a, OperadoresAritmeticos.NEGACION, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",40, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // expresion ::= expresion POTENCIA expresion 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = new Aritmeticas(a, b, OperadoresAritmeticos.POTENCIA, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",40, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // expresion ::= expresion MOD expresion 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = new Aritmeticas(a, b, OperadoresAritmeticos.MODULO, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",40, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // expresion ::= expresion SUMA expresion 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = new Aritmeticas(a, b, OperadoresAritmeticos.SUMA, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",40, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // expresion ::= expresion RESTA expresion 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = new Aritmeticas(a, b, OperadoresAritmeticos.RESTA, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",40, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // expresion ::= expresion MULTI expresion 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = new Aritmeticas(a, b, OperadoresAritmeticos.MULTIPLICACION, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",40, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // expresion ::= expresion DIV expresion 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = new Aritmeticas(a, b, OperadoresAritmeticos.DIVISION, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",40, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // expresion ::= expresion IGUALIGUAL expresion 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = new Relacionales(a, b, OperadoresRelacionales.IGUALACION, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",40, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // expresion ::= expresion DIFIGUAL expresion 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = new Relacionales(a, b, OperadoresRelacionales.DIFERENCIA, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",40, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // expresion ::= expresion MENORQ expresion 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = new Relacionales(a, b, OperadoresRelacionales.MENORQ, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",40, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // expresion ::= expresion MENORIGQ expresion 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = new Relacionales(a, b, OperadoresRelacionales.MENORIGQ, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",40, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // expresion ::= expresion MAYORQ expresion 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = new Relacionales(a, b, OperadoresRelacionales.MAYORQ, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",40, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // expresion ::= expresion MAYORIGQ expresion 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = new Relacionales(a, b, OperadoresRelacionales.MAYORIGQ, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",40, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // expresion ::= expresion OR expresion 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = new Logicos(a, b, OperadoresLogicos.OR, aleft, aright);   System.out.println("Result a  = " + Boolean.parseBoolean(a.toString()) + "  Result b = " + Boolean.parseBoolean(b.toString())); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",40, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // expresion ::= expresion AND expresion 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = new Logicos(a, b, OperadoresLogicos.AND, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",40, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // expresion ::= NOT expresion 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = new Logicos(a, OperadoresLogicos.NOT, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",40, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // expresion ::= PARA expresion PARC 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		   RESULT = a;   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",40, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // expresion ::= ENTERO 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = new Nativo(Integer.parseInt(a), new Tipo(TipoDato.ENTERO), aleft, aright );   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",40, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // expresion ::= DECIMAL 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = new Nativo(new Double(a), new Tipo(TipoDato.DECIMAL), aleft, aright );   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",40, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // expresion ::= STRING_LITERAL 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = new Nativo(a, new Tipo(TipoDato.CADENA), aleft, aright );   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",40, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // expresion ::= CHAR_LITERAL 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  RESULT = new Nativo(a, new Tipo(TipoDato.CARACTER), aleft, aright );   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",40, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // expresion ::= booleanos 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = new Nativo(a, new Tipo(TipoDato.BOOLEANO), aleft, aright );   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",40, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // expresion ::= ID 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  RESULT = new AcessoVar(a,aleft, aright);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",40, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // expresion ::= ID CORA expresion CORC 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		  RESULT = new AcessoVar(a,b,aleft, aright);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",40, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // llamadas ::= ID PARA paramsllamada PARC 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Instruccion> b = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new Llamada(a,b,aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("llamadas",35, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // llamadas ::= ID 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Llamada(a,new LinkedList<Instruccion>(),aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("llamadas",35, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // paramsllamada ::= paramsllamada COMA expresion 
            {
              LinkedList<Instruccion> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		LinkedList<Instruccion> a = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = a; RESULT.add(b); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("paramsllamada",46, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // paramsllamada ::= expresion 
            {
              LinkedList<Instruccion> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new LinkedList<Instruccion>(); RESULT.add(a);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("paramsllamada",46, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // paramsllamada ::= error 
            {
              LinkedList<Instruccion> RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("paramsllamada",46, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // booleanos ::= TRUE 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = true;   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("booleanos",37, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // booleanos ::= FALSE 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = false;   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("booleanos",37, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // declaraciones ::= declaracion 
            {
              LinkedList<Instruccion> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		LinkedList<Instruccion> a = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		if (a!=null){RESULT = a;} 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaraciones",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // declaraciones ::= declaracion declaraciones 
            {
              LinkedList<Instruccion> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Instruccion> a = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		LinkedList<Instruccion> b = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = a; if(b!=null ){ a.addAll(b); RESULT = a;} 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaraciones",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // declaraciones ::= error 
            {
              LinkedList<Instruccion> RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaraciones",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // declaracion ::= declaracionconst 
            {
              LinkedList<Instruccion> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		LinkedList<Instruccion> a = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = a;  System.out.println(Arrays.toString(a.toArray()));
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracion",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // declaracion ::= declaraciontype 
            {
              LinkedList<Instruccion> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		LinkedList<Instruccion> a = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracion",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // declaracion ::= declaracionvar 
            {
              LinkedList<Instruccion> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		LinkedList<Instruccion> a = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = a;  System.out.println(Arrays.toString(a.toArray()));
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracion",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // declaracion ::= procedure 
            {
              LinkedList<Instruccion> RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		LinkedList<Instruccion> b = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = b; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracion",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // procedure ::= PROCEDURE listaprocedure 
            {
              LinkedList<Instruccion> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		LinkedList<Instruccion> a = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("procedure",47, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // listaprocedure ::= declaracionprocedure CIERRE listaprocedure 
            {
              LinkedList<Instruccion> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		LinkedList<Instruccion> a = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		LinkedList<Instruccion> b = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 if(b!= null){a.addAll(b); } RESULT =a;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("listaprocedure",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // listaprocedure ::= 
            {
              LinkedList<Instruccion> RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("listaprocedure",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // NT$0 ::= 
            {
              LinkedList<Instruccion> RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
System.out.println(b);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$0",54, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // declaracionprocedure ::= ID NT$0 CIERRE varprocedure BEGIN instruccionesincierre END 
            {
              LinkedList<Instruccion> RESULT =null;
              // propagate RESULT from NT$0
                RESULT = (LinkedList<Instruccion>) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		LinkedList<Instruccion> a = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Instruccion> c = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
    if(a!=null){
        if(c!=null){
            a.addAll(c);
            RESULT = new LinkedList<>(Arrays.asList(new Procedure(b, new LinkedList<HashMap>(), a,bleft, bright)));
        }else{
            c=a;
            RESULT = new LinkedList<>(Arrays.asList(new Procedure(b, new LinkedList<HashMap>(), c,bleft, bright)));
        }
    } else{
    RESULT = new LinkedList<>(Arrays.asList(new Procedure(b, new LinkedList<HashMap>(), c,bleft, bright)));
    }
      
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracionprocedure",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // declaracionprocedure ::= ID PARA params PARC CIERRE varprocedure BEGIN instruccionesincierre END 
            {
              LinkedList<Instruccion> RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		LinkedList<HashMap> c = (LinkedList<HashMap>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		LinkedList<Instruccion> a = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Instruccion> d = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 if (a!=null){RESULT = a; RESULT.addLast(new Procedure(b, c, d,bleft, bright)); } else{RESULT = new LinkedList<>(Arrays.asList(new Procedure(b, c, d,bleft, bright)));} 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracionprocedure",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // varprocedure ::= declaracionvarprocedure 
            {
              LinkedList<Instruccion> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		LinkedList<Instruccion> a = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("varprocedure",48, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // varprocedure ::= 
            {
              LinkedList<Instruccion> RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("varprocedure",48, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // varprocedure ::= error 
            {
              LinkedList<Instruccion> RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("varprocedure",48, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // NT$1 ::= 
            {
              LinkedList<Instruccion> RESULT =null;
tipoD = "var";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$1",55, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // declaracionvarprocedure ::= VAR NT$1 listadeclaracionvarprocedure 
            {
              LinkedList<Instruccion> RESULT =null;
              // propagate RESULT from NT$1
                RESULT = (LinkedList<Instruccion>) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		LinkedList<Instruccion> a = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracionvarprocedure",49, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // listadeclaracionvarprocedure ::= variablesprocedure CIERRE listadeclaracionvarprocedure 
            {
              LinkedList<Instruccion> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		LinkedList<Instruccion> a = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		LinkedList<Instruccion> b = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  if(b!= null){a.addAll(b); } RESULT =a;  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("listadeclaracionvarprocedure",50, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // listadeclaracionvarprocedure ::= 
            {
              LinkedList<Instruccion> RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("listadeclaracionvarprocedure",50, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // listadeclaracionvarprocedure ::= error 
            {
              LinkedList<Instruccion> RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("listadeclaracionvarprocedure",50, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // variablesprocedure ::= ID listaids DOBP tipo IGUAL expresion 
            {
              LinkedList<Instruccion> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		LinkedList<String> b = (LinkedList<String>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Tipo c = (Tipo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion d = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new LinkedList<>(Arrays.asList( new Declaracion(tipoD,a,d, c,"Procedure", aleft, aright))); if(b!=null){for(String ins: b){RESULT.addLast(new Declaracion(tipoD,ins,d, c,"Procedure", bleft, bright));}} 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("variablesprocedure",51, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // variablesprocedure ::= ID listaids IGUAL expresion 
            {
              LinkedList<Instruccion> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		LinkedList<String> b = (LinkedList<String>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion c = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new LinkedList<>(Arrays.asList(  new Declaracion(tipoD, a, c,"Procedure", aleft, aright)));  if(b!=null){for(String ins: b){RESULT.addLast(new Declaracion(tipoD,ins, c,"Procedure", bleft, bright));}}
              CUP$parser$result = parser.getSymbolFactory().newSymbol("variablesprocedure",51, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // variablesprocedure ::= ID listaids DOBP tipo 
            {
              LinkedList<Instruccion> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		LinkedList<String> b = (LinkedList<String>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Tipo c = (Tipo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT =new LinkedList<>(Arrays.asList( new Declaracion(tipoD, a, c,"Procedure", aleft, aright))); if (b!=null){for (String ins :b){RESULT.addLast(new Declaracion(tipoD, ins,c,"Procedure", bleft, bright));}}
              CUP$parser$result = parser.getSymbolFactory().newSymbol("variablesprocedure",51, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // variablesprocedure ::= ID listaids DOBP ARRAY CORA ENTERO RANGO ENTERO CORC OF tipo 
            {
              LinkedList<Instruccion> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-10)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).right;
		LinkedList<String> b = (LinkedList<String>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-9)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String d = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Tipo e = (Tipo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT =new LinkedList<>(Arrays.asList(  new Declaracion(tipoD, a, e, "vector", c, d, aleft, aright))); System.out.println(d); {for (String ins :b){RESULT.addLast(new Declaracion(tipoD, ins, e, "vector", c, d, bleft, bright));}}
              CUP$parser$result = parser.getSymbolFactory().newSymbol("variablesprocedure",51, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // variablesprocedure ::= error 
            {
              LinkedList<Instruccion> RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("variablesprocedure",51, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // params ::= params COMA VAR ID DOBP tipo 
            {
              LinkedList<HashMap> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		LinkedList<HashMap> a = (LinkedList<HashMap>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Tipo b = (Tipo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = a; var hm2 = new HashMap<String, Object>(); hm2.put("id", c); hm2.put("tipo", b);  RESULT.add(hm2);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("params",36, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // params ::= params COMA ID DOBP tipo 
            {
              LinkedList<HashMap> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		LinkedList<HashMap> a = (LinkedList<HashMap>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Tipo b = (Tipo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = a; var hm2 = new HashMap<String, Object>(); hm2.put("id", c); hm2.put("tipo", b);  RESULT.add(hm2);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("params",36, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // params ::= VAR ID DOBP tipo 
            {
              LinkedList<HashMap> RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Tipo a = (Tipo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new LinkedList<HashMap>(); var hm = new HashMap<String, Object>(); hm.put("id", b); hm.put("tipo", a);  RESULT.add(hm); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("params",36, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // params ::= ID DOBP tipo 
            {
              LinkedList<HashMap> RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Tipo a = (Tipo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new LinkedList<HashMap>(); var hm = new HashMap<String, Object>(); hm.put("id", b); hm.put("tipo", a);  RESULT.add(hm); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("params",36, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // params ::= error 
            {
              LinkedList<HashMap> RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("params",36, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // NT$2 ::= 
            {
              LinkedList<Instruccion> RESULT =null;
tipoD = "const";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$2",56, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // declaracionconst ::= CONST NT$2 listadeclaraciontipo 
            {
              LinkedList<Instruccion> RESULT =null;
              // propagate RESULT from NT$2
                RESULT = (LinkedList<Instruccion>) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		LinkedList<Instruccion> a = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = a; System.out.println("Valor de las declaraciones "  + a.toArray());
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracionconst",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // listadeclaraciontipo ::= declaraciontipo CIERRE listadeclaraciontipo 
            {
              LinkedList<Instruccion> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		LinkedList<Instruccion> a = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		LinkedList<Instruccion> b = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 if(b!= null){a.addAll(b); } RESULT =a;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("listadeclaraciontipo",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // listadeclaraciontipo ::= 
            {
              LinkedList<Instruccion> RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("listadeclaraciontipo",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // declaraciontipo ::= ID listaids DOBP tipo IGUAL expresion 
            {
              LinkedList<Instruccion> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		LinkedList<String> b = (LinkedList<String>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Tipo c = (Tipo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion d = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new LinkedList<>(Arrays.asList( new Declaracion(tipoD, a, d,c, aleft, aright))); if (b!=null){for (String ins :b){RESULT.add(new Declaracion(tipoD, ins, d,c, bleft, bright));}}
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaraciontipo",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // declaraciontipo ::= ID listaids IGUAL expresion 
            {
              LinkedList<Instruccion> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		LinkedList<String> b = (LinkedList<String>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion c = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT =new LinkedList<>(Arrays.asList( new Declaracion(tipoD, a, c, aleft, aright))); if (b!=null){for (String ins :b){RESULT.add(new Declaracion(tipoD, ins,c, bleft, bright));}}
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaraciontipo",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // NT$3 ::= 
            {
              LinkedList<Instruccion> RESULT =null;
tipoD = "type"; System.out.println("Type");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$3",57, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // declaraciontype ::= TYPE NT$3 asignartipos 
            {
              LinkedList<Instruccion> RESULT =null;
              // propagate RESULT from NT$3
                RESULT = (LinkedList<Instruccion>) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		LinkedList<Instruccion> a = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaraciontype",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // asignartipos ::= listadeclaraciontype CIERRE asignartipos 
            {
              LinkedList<Instruccion> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		LinkedList<Instruccion> a = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		LinkedList<Instruccion> b = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("asignartipos",41, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // asignartipos ::= 
            {
              LinkedList<Instruccion> RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("asignartipos",41, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // NT$4 ::= 
            {
              LinkedList<Instruccion> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
System.out.println(" ID , listadeclaracion");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$4",58, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // listadeclaraciontype ::= ID COMA NT$4 listadeclaraciontype 
            {
              LinkedList<Instruccion> RESULT =null;
              // propagate RESULT from NT$4
                RESULT = (LinkedList<Instruccion>) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		LinkedList<Instruccion> b = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("listadeclaraciontype",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // NT$5 ::= 
            {
              LinkedList<Instruccion> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
System.out.println(" ID 2 " + a);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$5",59, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // listadeclaraciontype ::= ID NT$5 IGUAL tipo 
            {
              LinkedList<Instruccion> RESULT =null;
              // propagate RESULT from NT$5
                RESULT = (LinkedList<Instruccion>) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Tipo b = (Tipo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("listadeclaraciontype",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // NT$6 ::= 
            {
              LinkedList<Instruccion> RESULT =null;
tipoD = "var";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$6",60, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // declaracionvar ::= VAR NT$6 listadeclaracionvar 
            {
              LinkedList<Instruccion> RESULT =null;
              // propagate RESULT from NT$6
                RESULT = (LinkedList<Instruccion>) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		LinkedList<Instruccion> a = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracionvar",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // listadeclaracionvar ::= variables CIERRE listadeclaracionvar 
            {
              LinkedList<Instruccion> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		LinkedList<Instruccion> a = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		LinkedList<Instruccion> b = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  if(b!= null){a.addAll(b); } RESULT =a;  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("listadeclaracionvar",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // listadeclaracionvar ::= 
            {
              LinkedList<Instruccion> RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("listadeclaracionvar",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // variables ::= ID listaids DOBP tipo IGUAL expresion 
            {
              LinkedList<Instruccion> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		LinkedList<String> b = (LinkedList<String>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Tipo c = (Tipo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion d = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new LinkedList<>(Arrays.asList( new Declaracion(tipoD,a,d, c, aleft, aright))); if(b!=null){for(String ins: b){RESULT.addLast(new Declaracion(tipoD,ins,d, c, bleft, bright));}} 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("variables",42, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // variables ::= ID listaids IGUAL expresion 
            {
              LinkedList<Instruccion> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		LinkedList<String> b = (LinkedList<String>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion c = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new LinkedList<>(Arrays.asList(  new Declaracion(tipoD, a, c, aleft, aright)));  if(b!=null){for(String ins: b){RESULT.addLast(new Declaracion(tipoD,ins, c, bleft, bright));}}
              CUP$parser$result = parser.getSymbolFactory().newSymbol("variables",42, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // variables ::= ID listaids DOBP tipo 
            {
              LinkedList<Instruccion> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		LinkedList<String> b = (LinkedList<String>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Tipo c = (Tipo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT =new LinkedList<>(Arrays.asList( new Declaracion(tipoD, a, c, aleft, aright))); if (b!=null){for (String ins :b){RESULT.addLast(new Declaracion(tipoD, ins,c, bleft, bright));}}
              CUP$parser$result = parser.getSymbolFactory().newSymbol("variables",42, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // variables ::= ID listaids DOBP ARRAY CORA ENTERO RANGO ENTERO CORC OF tipo 
            {
              LinkedList<Instruccion> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-10)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).right;
		LinkedList<String> b = (LinkedList<String>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-9)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String d = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Tipo e = (Tipo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT =new LinkedList<>(Arrays.asList(  new Declaracion(tipoD, a, e, "vector", c, d, aleft, aright))); System.out.println(d); if (b!=null){for (String ins :b){RESULT.addLast(new Declaracion(tipoD, ins, e, "vector", c, d, bleft, bright));}}
              CUP$parser$result = parser.getSymbolFactory().newSymbol("variables",42, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // listaids ::= COMA ID listaids 
            {
              LinkedList<String> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		LinkedList<String> b = (LinkedList<String>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 System.out.println("Valor a = " + a); if (b != null){b.addFirst(a); RESULT = b;} else{ b = new LinkedList<>(Arrays.asList(a));  RESULT = b;}  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("listaids",52, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // listaids ::= 
            {
              LinkedList<String> RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("listaids",52, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // declaracionsubrangos ::= ID COMA declaracionsubrangos 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracionsubrangos",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // declaracionsubrangos ::= ID IGUAL expresion SUBRANGO expresion CIERRE 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Instruccion c = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracionsubrangos",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // declaracionrango ::= ID COMA declaracionrango 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracionrango",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // declaracionrango ::= ID IGUAL expresion RANGO expresion CIERRE 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Instruccion c = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracionrango",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // declaracionarreglo ::= ID IGUAL ARRAY CORA expresion RANGO expresion CORC OF tipo CIERRE 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-10)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Instruccion c = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Tipo d = (Tipo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new AsignacionVar(a, b, c,d, aleft, aright);  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracionarreglo",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // screcords ::= ID IGUAL RECORD declaracionrecord END CIERRE 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("screcords",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // declaracionrecord ::= ID DOBP PACKED ARRAY CORA expresion RANGO expresion CORC OF tipo CIERRE declaracionrecord 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-12)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-12)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-12)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Instruccion c = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Tipo d = (Tipo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracionrecord",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-12)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // declaracionrecord ::= ID DOBP PACKED ARRAY CORA expresion RANGO expresion CORC OF tipo CIERRE 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-11)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Instruccion c = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Tipo d = (Tipo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracionrecord",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // declaracionrecord ::= ID DOBP tipo CIERRE declaracionrecord 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Tipo b = (Tipo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracionrecord",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // declaracionrecord ::= ID DOBP tipo CIERRE 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Tipo b = (Tipo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracionrecord",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // declaracionrecord ::= error CIERRE 
            {
              Instruccion RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracionrecord",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // declaracionrecord ::= error 
            {
              Instruccion RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracionrecord",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // asignacion ::= ID DOBP IGUAL expresion 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new AsignacionVar(a, b, aleft, aright);  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("asignacion",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // asignacion ::= ID CORA expresion CORC DOBP IGUAL expresion 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion c = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new AsignacionVar(a, b, c, aleft, aright);  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("asignacion",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // cfor ::= FOR ID DOBP IGUAL expresion TO expresion DO BEGIN instruccionesincierre END 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-9)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Instruccion c = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Instruccion> d = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = new FOR(a,b,c,d,aleft,aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("cfor",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // swhile ::= WHILE expresion DO BEGIN instruccionesincierre END 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Instruccion> b = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new WHILE(a,b, aleft, aright);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("swhile",31, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // srepeat ::= REPEAT instruccionesincierre UNTIL expresion 
            {
              Instruccion RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		LinkedList<Instruccion> b = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new REPEAT(a,b, aleft, aright);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("srepeat",32, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // scase ::= CASE expresion OF casos casodefault END 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		LinkedList<Caso> b = (LinkedList<Caso>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Caso c = (Caso)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = new CASE(a, b, c, aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("scase",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // scase ::= CASE expresion OF casos END 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Caso> b = (LinkedList<Caso>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new CASE(a, b, aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("scase",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // scase ::= CASE expresion OF casodefault END 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Caso b = (Caso)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new CASE(a,b, aleft, aright);  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("scase",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // casos ::= casos caso 
            {
              LinkedList<Caso> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Caso> a = (LinkedList<Caso>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Caso b = (Caso)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = a; RESULT.add(b); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("casos",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // casos ::= caso 
            {
              LinkedList<Caso> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Caso a = (Caso)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new LinkedList<>(); RESULT.add(a); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("casos",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // caso ::= listacasos DOBP subcasos 
            {
              Caso RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		LinkedList<Instruccion> a = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		LinkedList<Instruccion> b = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   for (Instruccion ins : a){RESULT =new Caso(ins, b, true, aleft, aright);  } 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("caso",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // listacasos ::= expresion COMA listacasos 
            {
              LinkedList<Instruccion> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		LinkedList<Instruccion> b = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 if (b != null){b.addFirst(a); RESULT = b;} else{ b = new LinkedList<>(Arrays.asList(a));  RESULT = b;}  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("listacasos",45, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // listacasos ::= expresion 
            {
              LinkedList<Instruccion> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new LinkedList<>(Arrays.asList(a)); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("listacasos",45, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // subcasos ::= instruccion CIERRE 
            {
              LinkedList<Instruccion> RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new LinkedList<>(Arrays.asList(b)); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("subcasos",44, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // subcasos ::= BEGIN instruccionesincierre END CIERRE 
            {
              LinkedList<Instruccion> RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		LinkedList<Instruccion> b = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = b; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("subcasos",44, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // casodefault ::= ELSE instruccionesincierre 
            {
              Caso RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		LinkedList<Instruccion> a = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  RESULT = new Caso(null, a, false, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("casodefault",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // sbreak ::= BREAK 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new BREAK(aleft, aright);     
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sbreak",33, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // scontinue ::= CONTINUE 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		    RESULT = new CONTINUE(aleft, aright);     
              CUP$parser$result = parser.getSymbolFactory().newSymbol("scontinue",34, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 145: // tipo ::= INT 
            {
              Tipo RESULT =null;
		 RESULT = new Tipo(TipoDato.ENTERO);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo",39, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 146: // tipo ::= REAL 
            {
              Tipo RESULT =null;
		 RESULT = new Tipo(TipoDato.DECIMAL);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo",39, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 147: // tipo ::= CADENA 
            {
              Tipo RESULT =null;
		 RESULT = new Tipo(TipoDato.CADENA);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo",39, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 148: // tipo ::= CHAR 
            {
              Tipo RESULT =null;
		 RESULT = new Tipo(TipoDato.CARACTER);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo",39, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 149: // tipo ::= BOOL 
            {
              Tipo RESULT =null;
		 RESULT = new Tipo(TipoDato.BOOLEANO);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo",39, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
