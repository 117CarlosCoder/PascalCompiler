package com.compiladores.AnalizadorSintactico;

import java_cup.runtime.*;
import com.compiladores.Abstracto.Instruccion;
import com.compiladores.AnalizadorLexico.Lexico;
import java.util.LinkedList;
import java.util.Arrays;
import java.util.HashMap;

//Expresiones
import com.compiladores.Expresiones.Aritmeticas.*;
import com.compiladores.Expresiones.Relacionales.*;
import com.compiladores.Expresiones.Logicas.*;
import com.compiladores.Expresiones.Nativo;
import com.compiladores.Expresiones.Variables.*;
import com.compiladores.Expresiones.Casteos.*;

//Instrucciones
import com.compiladores.Instrucciones.Print;
import com.compiladores.Instrucciones.Declaracion;
import com.compiladores.Instrucciones.Readln;
import com.compiladores.Instrucciones.Llamada;
import com.compiladores.Instrucciones.Procedure;
import com.compiladores.Instrucciones.Sentencias.Control.*;
import com.compiladores.Instrucciones.Sentencias.Ciclicas.*;
import com.compiladores.Instrucciones.Sentencias.Transferencia.*;

//Simobolos
import com.compiladores.Simbolo.Tipo;
import com.compiladores.Simbolo.TipoDato;

//Errores
import com.compiladores.Excepciones.Errores;

parser code
{:
    Lexico s;
    parser(Lexico s){this.s = s;}

    public LinkedList<Errores> listaErrores = new LinkedList<>();
    
    public void syntax_error(Symbol s){

        listaErrores.add(new Errores("SINTACTICO RECUPERABLE", "No se esperaba el componente "+ s.value, s.left, s.right));

        System.out.println("> Error Sintactico en la linea " + (s.left) + " y columna " + (s.right) + ". No se esperaba el componente: " + (s.value) + ".");
    }

    public void unrecovered_syntax_error (Symbol s){
        listaErrores.add(new Errores("SINTACTICO NO RECUPERABLE","No se esperaba el componente "+ s.value, s.left, s.right));    

        System.out.println("> Error Sintactico no recuperable en la linea" + (s.left) + " y columna " + (s.right) + ". No se esperaba el componente: " + (s.value) + ".");

    }

:}

action code
{:
    String tipoD = "";
    String idacumulado = "";
:}

terminal SUMA, RESTA, DIV, MULTI, UMENOS;
terminal PARA, PARC, DOBP, IGUAL, CIERRE, COMA, PUNTO, RANGO, SUBRANGO;
terminal VAR, CONST, TRUE , FALSE, POTENCIA, MOD, DEFAULT;
terminal IF, CASE, WHILE, FOR, DO, RETURN, ELSE, TYPE, OF,BEGIN, END, PACKED, RECORD, ARRAY, THEN, TO, PROGRAM, REPEAT, UNTIL, PROCEDURE;
terminal IGUALIGUAL, DIFIGUAL, MENORQ, MENORIGQ, MAYORQ, MAYORIGQ;
terminal OR, AND, XOR, NOT;
terminal INCRE, DECRE;
terminal LLAVEA, LLAVEC, CORA, CORC; 
terminal INT, CADENA, REAL, BOOL, CHAR, IMPRIMIR;
terminal String STRING_LITERAL, ENTERO, DECIMAL,CHAR_LITERAL, ID,LEER;
terminal String BREAK, CONTINUE;


non terminal LinkedList<Instruccion> ini, instrucciones, instruccionesincierre, otrasinstrucciones,declaracion ;
non terminal LinkedList<Instruccion> listadeclaraciontipo, declaracionconst, declaracionvar, listadeclaracionvar, declaraciontype,listadeclaraciontype, declaraciones, declaraciontipo, listaprocedure, declaracionprocedure;
non terminal LinkedList<Caso> casos;
non terminal Instruccion listprint;
non terminal Caso casodefault, caso;
non terminal Instruccion instruccion, asignacion , declaracionsubrangos, declaracionrango, declaracionarray , declaracionarreglo, declaracionrecord, readln;
non terminal Instruccion scase, cfor, screcords, sif;
non terminal Instruccion swhile, srepeat;
non terminal Instruccion sbreak, scontinue;
non terminal Instruccion llamadas;
non terminal LinkedList<HashMap> params;
non terminal booleanos, posiblecierre;
non terminal Tipo tipo;
non terminal Instruccion expresion;
non terminal LinkedList<Instruccion>  asignartipos, variables, iftipos, subcasos,listacasos, paramsllamada, procedure, varprocedure, declaracionvarprocedure, listadeclaracionvarprocedure, variablesprocedure;
non terminal LinkedList<String> listaids;
non terminal optionacierre;

precedence left OR;
precedence left AND;
precedence left XOR;
precedence right NOT;
precedence left IGUALIGUAL, DIFIGUAL, MENORQ, MENORIGQ, MAYORQ, MAYORIGQ;
precedence left SUMA, RESTA;
precedence left MULTI, DIV,MOD;
precedence nonassoc POTENCIA;
precedence right UMENOS;
precedence left ELSE;

start with ini;

ini ::=
     PROGRAM ID CIERRE declaraciones:a  BEGIN instrucciones:c END PUNTO {: /*if (b!= null){a.addAll(b);}*/ a.addAll(c); RESULT = a; :}
;

instrucciones ::=
   instrucciones:a instruccion:b CIERRE {: RESULT = a; RESULT.add(b); :}
 | instruccion:a  CIERRE{: RESULT = new LinkedList<>(); RESULT.add(a); :}
 | error CIERRE
 | error

;


sif::=
    IF  expresion:a  THEN iftipos:b   {:   RESULT = new IF(a, b, aleft, aright);:}
   |IF  expresion:a  THEN iftipos:b  ELSE  iftipos:c {: RESULT = new IF(a, b,c, aleft, aright);:}
;

iftipos::=
     instruccion:a {:RESULT = new LinkedList<>(); RESULT.add(a); :}
   | BEGIN instruccionesincierre:a  END  {: RESULT =a; :}
   | error
;

instruccionesincierre ::=
    instruccion:a CIERRE instruccionesincierre:b  {: if (b != null){b.addFirst(a); RESULT = b;} else{ b = new LinkedList<>(Arrays.asList(a));  RESULT = b;}:}
    |/* empty */
    | error CIERRE
    | error
;

instruccion ::= 
   IMPRIMIR PARA listprint:a PARC     {:   RESULT = new Print(a, aleft, aright); :}
  |LEER PARA ID:a listaids:b PARC     {: b = new LinkedList<>(Arrays.asList(a)); b.add(a); RESULT = new Readln(b, aleft, aright);   :}
  |asignacion:a     {: RESULT = a; :}
  |sif:a            {: RESULT = a; :}
  |scase:a          {: RESULT = a; :}
  |cfor:a           {: RESULT = a; :}
  |swhile:a         {: RESULT = a; :}
  |srepeat:a        {: RESULT = a; :}
  |sbreak:a         {: RESULT = a; :}
  |scontinue:a      {: RESULT = a; :}
  |llamadas:a       {: RESULT = a; :}
;

listprint ::=
     expresion:a COMA listprint:b {:RESULT = new Union(a, b, OperadoresAritmeticos.SUMA, aleft, aright);     :}
   | expresion:a  {: RESULT = a;  :}
  | error

 ;

expresion ::= RESTA expresion:a             {:   RESULT = new Aritmeticas(a, OperadoresAritmeticos.NEGACION, aleft, aright);   :} %prec UMENOS
            | expresion:a POTENCIA expresion:b   {:   RESULT = new Aritmeticas(a, b, OperadoresAritmeticos.POTENCIA, aleft, aright);   :}
            | expresion:a MOD expresion:b   {:   RESULT = new Aritmeticas(a, b, OperadoresAritmeticos.MODULO, aleft, aright);   :}
            | expresion:a SUMA expresion:b   {:   RESULT = new Aritmeticas(a, b, OperadoresAritmeticos.SUMA, aleft, aright);   :}
            | expresion:a RESTA expresion:b   {:   RESULT = new Aritmeticas(a, b, OperadoresAritmeticos.RESTA, aleft, aright);   :}
            | expresion:a MULTI expresion:b   {:   RESULT = new Aritmeticas(a, b, OperadoresAritmeticos.MULTIPLICACION, aleft, aright);   :}
            | expresion:a DIV expresion:b   {:   RESULT = new Aritmeticas(a, b, OperadoresAritmeticos.DIVISION, aleft, aright);   :}
            | expresion:a IGUALIGUAL expresion:b   {:   RESULT = new Relacionales(a, b, OperadoresRelacionales.IGUALACION, aleft, aright);   :}
            | expresion:a DIFIGUAL expresion:b   {:   RESULT = new Relacionales(a, b, OperadoresRelacionales.DIFERENCIA, aleft, aright);   :}
            | expresion:a MENORQ expresion:b   {:   RESULT = new Relacionales(a, b, OperadoresRelacionales.MENORQ, aleft, aright);   :}
            | expresion:a MENORIGQ expresion:b   {:   RESULT = new Relacionales(a, b, OperadoresRelacionales.MENORIGQ, aleft, aright);   :}
            | expresion:a MAYORQ expresion:b   {:   RESULT = new Relacionales(a, b, OperadoresRelacionales.MAYORQ, aleft, aright);   :}
            | expresion:a MAYORIGQ expresion:b   {:   RESULT = new Relacionales(a, b, OperadoresRelacionales.MAYORIGQ, aleft, aright);   :}
            | expresion:a OR expresion:b   {:   RESULT = new Logicos(a, b, OperadoresLogicos.OR, aleft, aright);   System.out.println("Result a  = " + Boolean.parseBoolean(a.toString()) + "  Result b = " + Boolean.parseBoolean(b.toString())); :}
            | expresion:a AND expresion:b   {:   RESULT = new Logicos(a, b, OperadoresLogicos.AND, aleft, aright);   :}
            | NOT expresion:a   {:   RESULT = new Logicos(a, OperadoresLogicos.NOT, aleft, aright);   :}
            | PARA expresion:a PARC  {:   RESULT = a;   :}
            | ENTERO:a      {:   RESULT = new Nativo(Integer.parseInt(a), new Tipo(TipoDato.ENTERO), aleft, aright );   :}
            | DECIMAL:a     {:   RESULT = new Nativo(new Double(a), new Tipo(TipoDato.DECIMAL), aleft, aright );   :}
            | STRING_LITERAL:a      {:   RESULT = new Nativo(a, new Tipo(TipoDato.CADENA), aleft, aright );   :}
            | CHAR_LITERAL:a      {:  RESULT = new Nativo(a, new Tipo(TipoDato.CARACTER), aleft, aright );   :}
            | booleanos:a      {:   RESULT = new Nativo(a, new Tipo(TipoDato.BOOLEANO), aleft, aright );   :}
            | ID:a          {:  RESULT = new AcessoVar(a,aleft, aright);:}
            | ID:a CORA expresion:b CORC          {:  RESULT = new AcessoVar(a,b,aleft, aright);:}

;

llamadas ::=
    ID:a PARA paramsllamada:b PARC  {: RESULT = new Llamada(a,b,aleft, aright); :}
   |ID:a  {: RESULT = new Llamada(a,new LinkedList<Instruccion>(),aleft, aright); :}

;

paramsllamada ::=
    paramsllamada:a COMA expresion:b    {: RESULT = a; RESULT.add(b); :}
   |expresion:a                         {: RESULT = new LinkedList<Instruccion>(); RESULT.add(a);:}
  | error

;


booleanos ::= 
    TRUE:a    {:   RESULT = true;   :}
   |FALSE:a   {:   RESULT = false;   :}
   //|ENTERO:a   {:  if (a.equals("0")){RESULT = false;} if (a.equals("1")){RESULT = true; } else { return new Errores("SEMANTICO", "No puede ingresar valores enteros que no sean 0 o 1", a.left, a.right);}   :}
;


declaraciones ::=
    declaracion:a {:if (a!=null){RESULT = a;} :}
   |declaracion:a declaraciones:b {: RESULT = a; if(b!=null ){ a.addAll(b); RESULT = a;} :}
  | error

;

declaracion ::=
    declaracionconst:a  {: RESULT = a;  System.out.println(Arrays.toString(a.toArray()));:}
   |declaraciontype:a    {: :}
   |declaracionvar:a     {: RESULT = a;  System.out.println(Arrays.toString(a.toArray()));:}
   |procedure:b         {: RESULT = b; :}

;

procedure ::=
    PROCEDURE listaprocedure:a {: RESULT = a; :}

;

listaprocedure ::=
   declaracionprocedure:a CIERRE listaprocedure:b {: if(b!= null){a.addAll(b); } RESULT =a;:}
   |/* empty */

;

declaracionprocedure::=
    ID:b {:System.out.println(b);:} CIERRE varprocedure:a BEGIN instruccionesincierre:c END   {:
    if(a!=null){
        if(c!=null){
            a.addAll(c);
            RESULT = new LinkedList<>(Arrays.asList(new Procedure(b, new LinkedList<HashMap>(), a,bleft, bright)));
        }else{
            c=a;
            RESULT = new LinkedList<>(Arrays.asList(new Procedure(b, new LinkedList<HashMap>(), c,bleft, bright)));
        }
    } else{
    RESULT = new LinkedList<>(Arrays.asList(new Procedure(b, new LinkedList<HashMap>(), c,bleft, bright)));
    }
      :}
   |ID:b PARA params:c PARC CIERRE varprocedure:a BEGIN instruccionesincierre:d END  {: if (a!=null){RESULT = a; RESULT.addLast(new Procedure(b, c, d,bleft, bright)); } else{RESULT = new LinkedList<>(Arrays.asList(new Procedure(b, c, d,bleft, bright)));} :}
;

varprocedure::=
        declaracionvarprocedure:a    {: RESULT = a; :}
       | /* empty */
  | error

;

declaracionvarprocedure ::=
    VAR {:tipoD = "var";:}listadeclaracionvarprocedure:a  {: RESULT = a; :}
;

listadeclaracionvarprocedure ::=
      variablesprocedure:a  CIERRE listadeclaracionvarprocedure:b      {:  if(b!= null){a.addAll(b); } RESULT =a;  :}
     | /* empty */
  | error

;

variablesprocedure ::=
    ID:a listaids:b DOBP tipo:c IGUAL expresion:d  {: RESULT = new LinkedList<>(Arrays.asList( new Declaracion(tipoD,a,d, c,"Procedure", aleft, aright))); if(b!=null){for(String ins: b){RESULT.addLast(new Declaracion(tipoD,ins,d, c,"Procedure", bleft, bright));}} :}
   |ID:a listaids:b IGUAL expresion:c  {: RESULT = new LinkedList<>(Arrays.asList(  new Declaracion(tipoD, a, c,"Procedure", aleft, aright)));  if(b!=null){for(String ins: b){RESULT.addLast(new Declaracion(tipoD,ins, c,"Procedure", bleft, bright));}}:}
   |ID:a listaids:b DOBP tipo:c {: RESULT =new LinkedList<>(Arrays.asList( new Declaracion(tipoD, a, c,"Procedure", aleft, aright))); if (b!=null){for (String ins :b){RESULT.addLast(new Declaracion(tipoD, ins,c,"Procedure", bleft, bright));}}:}
   |ID:a listaids:b DOBP ARRAY CORA ENTERO:c RANGO ENTERO:d CORC OF tipo:e   {:RESULT =new LinkedList<>(Arrays.asList(  new Declaracion(tipoD, a, e, "vector", c, d, aleft, aright))); System.out.println(d); {for (String ins :b){RESULT.addLast(new Declaracion(tipoD, ins, e, "vector", c, d, bleft, bright));}}:}
  | error

;

params ::=
     params:a COMA VAR ID:c DOBP tipo:b      {: RESULT = a; var hm2 = new HashMap<String, Object>(); hm2.put("id", c); hm2.put("tipo", b);  RESULT.add(hm2);:}
   | params:a COMA ID:c DOBP tipo:b      {: RESULT = a; var hm2 = new HashMap<String, Object>(); hm2.put("id", c); hm2.put("tipo", b);  RESULT.add(hm2);:}
   | VAR ID:b DOBP tipo:a                 {: RESULT = new LinkedList<HashMap>(); var hm = new HashMap<String, Object>(); hm.put("id", b); hm.put("tipo", a);  RESULT.add(hm); :}
   | ID:b DOBP tipo:a                 {: RESULT = new LinkedList<HashMap>(); var hm = new HashMap<String, Object>(); hm.put("id", b); hm.put("tipo", a);  RESULT.add(hm); :}
   | error
;

declaracionconst ::=
    CONST {:tipoD = "const";:}listadeclaraciontipo:a  {: RESULT = a; System.out.println("Valor de las declaraciones "  + a.toArray());:}
;

listadeclaraciontipo ::=
    declaraciontipo:a CIERRE listadeclaraciontipo:b     {: if(b!= null){a.addAll(b); } RESULT =a;:}
    | /* empty */
;

declaraciontipo ::=
    ID:a listaids:b DOBP tipo:c IGUAL expresion:d {: RESULT = new LinkedList<>(Arrays.asList( new Declaracion(tipoD, a, d,c, aleft, aright))); if (b!=null){for (String ins :b){RESULT.add(new Declaracion(tipoD, ins, d,c, bleft, bright));}}:}
   |ID:a listaids:b IGUAL expresion:c  {: RESULT =new LinkedList<>(Arrays.asList( new Declaracion(tipoD, a, c, aleft, aright))); if (b!=null){for (String ins :b){RESULT.add(new Declaracion(tipoD, ins,c, bleft, bright));}}:}

;


declaraciontype ::=
    TYPE {:tipoD = "type"; System.out.println("Type");:}asignartipos:a  {::}
;

asignartipos ::=
    listadeclaraciontype:a CIERRE asignartipos:b {: :}
   | /* empty */
;

listadeclaraciontype::=
     ID:a COMA {:System.out.println(" ID , listadeclaracion");:}listadeclaraciontype:b {: :}
    |ID:a {:System.out.println(" ID 2 " + a);:}  IGUAL  tipo:b  {::}

;



declaracionvar ::=
    VAR {:tipoD = "var";:}listadeclaracionvar:a  {: RESULT = a; :}
;

listadeclaracionvar ::=
      variables:a  CIERRE listadeclaracionvar:b      {:  if(b!= null){a.addAll(b); } RESULT =a;  :}
     | /* empty */
;

variables ::=
    ID:a listaids:b DOBP tipo:c IGUAL expresion:d  {: RESULT = new LinkedList<>(Arrays.asList( new Declaracion(tipoD,a,d, c, aleft, aright))); if(b!=null){for(String ins: b){RESULT.addLast(new Declaracion(tipoD,ins,d, c, bleft, bright));}} :}
   |ID:a listaids:b IGUAL expresion:c  {: RESULT = new LinkedList<>(Arrays.asList(  new Declaracion(tipoD, a, c, aleft, aright)));  if(b!=null){for(String ins: b){RESULT.addLast(new Declaracion(tipoD,ins, c, bleft, bright));}}:}
   |ID:a listaids:b DOBP tipo:c {: RESULT =new LinkedList<>(Arrays.asList( new Declaracion(tipoD, a, c, aleft, aright))); if (b!=null){for (String ins :b){RESULT.addLast(new Declaracion(tipoD, ins,c, bleft, bright));}}:}
   |ID:a listaids:b DOBP ARRAY CORA ENTERO:c RANGO ENTERO:d CORC OF tipo:e   {:RESULT =new LinkedList<>(Arrays.asList(  new Declaracion(tipoD, a, e, "vector", c, d, aleft, aright))); System.out.println(d); if (b!=null){for (String ins :b){RESULT.addLast(new Declaracion(tipoD, ins, e, "vector", c, d, bleft, bright));}}:}

;

listaids ::=
    COMA ID:a listaids:b {: System.out.println("Valor a = " + a); if (b != null){b.addFirst(a); RESULT = b;} else{ b = new LinkedList<>(Arrays.asList(a));  RESULT = b;}  :}
   | /* empty */
 ;


declaracionsubrangos::=
    ID:a COMA declaracionsubrangos:b {: :}
   |ID:a IGUAL expresion:b SUBRANGO expresion:c CIERRE
;

declaracionrango ::=
     ID:a COMA declaracionrango:b {: :}
   | ID:a IGUAL expresion:b RANGO expresion:c CIERRE

;

declaracionarreglo ::=
   ID:a IGUAL ARRAY CORA expresion:b RANGO expresion:c CORC OF tipo:d CIERRE {: RESULT = new AsignacionVar(a, b, c,d, aleft, aright);  :}
;

screcords ::=
    ID:a IGUAL RECORD declaracionrecord:b END CIERRE {: :}
;

declaracionrecord ::=
      ID:a DOBP PACKED ARRAY CORA expresion:b RANGO expresion:c CORC OF tipo:d CIERRE declaracionrecord
     |ID:a DOBP PACKED ARRAY CORA expresion:b RANGO expresion:c CORC OF tipo:d CIERRE
     |ID:a DOBP tipo:b CIERRE declaracionrecord
     |ID:a DOBP tipo:b CIERRE
     | error CIERRE
     | error
;

asignacion ::= 
    ID:a DOBP IGUAL expresion:b  {: RESULT = new AsignacionVar(a, b, aleft, aright);  :}
   //|ID:a IGUAL llamadas:b  {: RESULT = new AsignacionVar(a, b, aleft, aright);  :}
   |ID:a CORA expresion:b CORC DOBP IGUAL expresion:c  {: RESULT = new AsignacionVar(a, b, c, aleft, aright);  :}
;

cfor ::= 
    FOR ID:a DOBP IGUAL expresion:b TO expresion:c DO BEGIN instruccionesincierre:d END {:RESULT = new FOR(a,b,c,d,aleft,aright); :}

;

swhile ::=
    WHILE expresion:a DO BEGIN instruccionesincierre:b  END  {: RESULT = new WHILE(a,b, aleft, aright);:}

;

srepeat ::=
    REPEAT instruccionesincierre:b UNTIL expresion:a     {: RESULT = new REPEAT(a,b, aleft, aright);:}

;

scase ::=
    CASE expresion:a OF casos:b casodefault:c END {:RESULT = new CASE(a, b, c, aleft, aright); :}
   |CASE expresion:a OF casos:b END  {: RESULT = new CASE(a, b, aleft, aright); :}
   |CASE expresion:a OF casodefault:b  END {: RESULT = new CASE(a,b, aleft, aright);  :}

;

casos ::=
       casos:a caso:b {: RESULT = a; RESULT.add(b); :}
    | caso:a  {: RESULT = new LinkedList<>(); RESULT.add(a); :}
;


caso ::= 
    listacasos:a DOBP subcasos:b {:   for (Instruccion ins : a){RESULT =new Caso(ins, b, true, aleft, aright);  } :}
;

listacasos ::=
    expresion:a COMA  listacasos:b {: if (b != null){b.addFirst(a); RESULT = b;} else{ b = new LinkedList<>(Arrays.asList(a));  RESULT = b;}  :}
   |expresion:a {: RESULT = new LinkedList<>(Arrays.asList(a)); :}
;

subcasos::=
      instruccion:b CIERRE {: RESULT = new LinkedList<>(Arrays.asList(b)); :}
    | BEGIN instruccionesincierre:b END CIERRE {: RESULT = b; :}
;

casodefault ::=
    ELSE  instruccionesincierre:a   {:  RESULT = new Caso(null, a, false, aleft, aright);   :}
;

sbreak ::=
    BREAK:a       {: RESULT = new BREAK(aleft, aright);     :}
;

scontinue ::=
    CONTINUE:a       {:    RESULT = new CONTINUE(aleft, aright);     :}
;


tipo ::=
    INT     {: RESULT = new Tipo(TipoDato.ENTERO);:}
   |REAL  {: RESULT = new Tipo(TipoDato.DECIMAL);:}
   |CADENA  {: RESULT = new Tipo(TipoDato.CADENA);:}
   |CHAR  {: RESULT = new Tipo(TipoDato.CARACTER);:}
   |BOOL  {: RESULT = new Tipo(TipoDato.BOOLEANO);:}
;

